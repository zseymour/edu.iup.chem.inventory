/**
 * This class is generated by jOOQ
 */
package edu.iup.chem.inventory.db.inventory.tables.records;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.measure.quantity.Mass;
import javax.measure.quantity.Temperature;

import org.apache.commons.io.IOUtils;
import org.jscience.physics.amount.Amount;
import org.jscience.physics.amount.AmountFormat;
import org.openscience.cdk.DefaultChemObjectBuilder;
import org.openscience.cdk.formula.MolecularFormula;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.tools.manipulator.MolecularFormulaManipulator;

import edu.iup.chem.inventory.Utils;
import edu.iup.chem.inventory.amount.ChemicalAmountFactory;
import edu.iup.chem.inventory.amount.ChemicalDensity;
import edu.iup.chem.inventory.amount.ChemicalMass;
import edu.iup.chem.inventory.dao.ChemicalDao;
import edu.iup.chem.inventory.db.inventory.enums.ChemicalCold;
import edu.iup.chem.inventory.db.inventory.enums.ChemicalFlamm;
import edu.iup.chem.inventory.db.inventory.enums.ChemicalStorageClass;
import edu.iup.chem.inventory.search.ChemicalSubstructureSearcher;
import edu.iup.chem.inventory.search.ChemicalWebSearch;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value = { "http://www.jooq.org", "2.5.1" }, comments = "This class is generated by jOOQ")
public class ChemicalRecord
		extends
		org.jooq.impl.UpdatableRecordImpl<edu.iup.chem.inventory.db.inventory.tables.records.ChemicalRecord> {

	private static final long	serialVersionUID	= 492614303;
	private SynonymRecord		names				= null;

	private ChemicalDensity		density				= null;
	private ChemicalMass		ld50				= null;
	private Amount<Temperature>	bp					= null;
	private Amount<Temperature>	mp					= null;
	private Amount<Mass>		molar				= null;
	private MolecularFormula	molFormula			= null;
	private IAtomContainer		molecule			= null;
	private final AmountFormat	formatter			= AmountFormat
															.getExactDigitsInstance();
	private final String		densityResponse		= null;
	private String				meltingResponse		= null;
	private String				boilingResponse		= null;
	private final String		ld50response		= null;
	private boolean				densityChecked		= false;
	private boolean				meltingChecked		= false;
	private boolean				boilingChecked		= false;
	private boolean				completionChecked	= false;
	private boolean				complete			= false;
	private boolean				ld50Checked;
	private Amount<Temperature>	fp					= null;
	private String				flashResponse		= null;
	private boolean				flashChecked		= false;

	/**
	 * Create a detached ChemicalRecord
	 */
	public ChemicalRecord() {
		super(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL);
	}

	public Double getBoilingPoint() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.BOILING_POINT);
	}

	public String getBoilingPointString() {
		if (!boilingChecked || !complete) {
			if (bp == null && !boilingChecked) {
				if (getBoilingPoint() == null) {
					final double boiling = ChemicalWebSearch
							.fetchBoilingPoint(getCas());
					if (boiling == Double.MAX_VALUE) {
						boilingResponse = "Unknown";
					} else {
						setBoilingPoint(boiling);
						ChemicalDao.store(this);
						boilingResponse = String
								.format("%.1f %s", bp.getEstimatedValue(), bp
										.getUnit().toString());
					}
				} else {
					bp = Amount.valueOf(getBoilingPoint(),
							javax.measure.unit.SI.CELSIUS);
					boilingResponse = String.format("%.1f %s",
							bp.getEstimatedValue(), bp.getUnit().toString());
				}
			} else if (bp != null) {
				boilingResponse = String.format("%.1f %s",
						bp.getEstimatedValue(), bp.getUnit().toString());
			} else {
				boilingResponse = "Unknown";
			}
			boilingChecked = true;
		}

		return boilingResponse;
	}

	/**
	 * The table column <code>inventory.chemical.carc</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalCarc getCarc() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CARC);
	}

	/**
	 * The table column <code>inventory.chemical.cas</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.lang.String getCas() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CAS);
	}

	public Integer getCid() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CID);
	}

	/**
	 * The table column <code>inventory.chemical.cold</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalCold getCold() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.COLD);
	}

	public Byte getComplete() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.COMPLETE);
	}

	/**
	 * ID for ChemSpider searches
	 */
	public java.lang.String getCsid() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CSID);
	}

	public Double getDensity() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.DENSITY);
	}

	public String getDensityUnits() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.DENSITY_UNITS);
	}

	public ChemicalDensity getDensityWithUnits() {
		if (!densityChecked || !complete) {
			densityChecked = true;
			if (density == null) {
				if (getDensity() == null || getDensity() == 1.0
						|| getDensityUnits() == null) {
					density = ChemicalWebSearch.fetchDensity(getCas());
					setDensity(density.getQuantity());
					setDensityUnits(density.getUnit());
					ChemicalDao.store(this);
				} else {
					if (getDensityUnits().equals("specific gravity")) {
						setDensityWithUnits(getDensity() / 1000,
								getDensityUnits());
					} else {
						setDensityWithUnits(getDensity(), getDensityUnits());
					}
				}
			}
		}

		return density;
	}

	/**
	 * The table column <code>inventory.chemical.flamm</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalFlamm getFlamm() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FLAMM);
	}

	public Double getFlashPoint() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FLASH_POINT);
	}

	public String getFlashPointString() {
		if (!flashChecked || !complete) {
			if (fp == null && !flashChecked) {
				if (getFlashPoint() == null) {
					final double flash = ChemicalWebSearch
							.fetchFlashPoint(getCas());
					if (flash == Double.MAX_VALUE) {
						flashResponse = "Unknown";
					} else {
						setFlashPoint(flash);
						ChemicalDao.store(this);
						flashResponse = String
								.format("%.1f %s", fp.getEstimatedValue(), fp
										.getUnit().toString());
					}
				} else {
					fp = Amount.valueOf(getFlashPoint(),
							javax.measure.unit.NonSI.FAHRENHEIT);
					flashResponse = String.format("%.1f %s",
							fp.getEstimatedValue(), fp.getUnit().toString());
				}
			} else if (fp != null) {
				flashResponse = String.format("%.1f %s",
						fp.getEstimatedValue(), fp.getUnit().toString());
			} else {
				flashResponse = "Unknown";
			}
			flashChecked = true;
		}

		return flashResponse;
	}

	/**
	 * The table column <code>inventory.chemical.formula</code>
	 */
	public java.lang.String getFormula() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FORMULA);
	}

	public String getFormulaHTML() {
		final MolecularFormula mol = getMolecularFormula();

		if (mol == null) {
			return "None";
		}
		return MolecularFormulaManipulator.getHTML(mol);
	}

	public String getFormulaString() {
		final MolecularFormula mol = getMolecularFormula();

		if (mol == null) {
			return "None";
		}

		return MolecularFormulaManipulator.getString(mol);
	}

	/**
	 * International Chemical Identifier (unique)
	 */
	public java.lang.String getInchi() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.INCHI);
	}

	public Double getLd50() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.LD50);
	}

	public String getLd50units() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.LD50UNITS);
	}

	public ChemicalMass getLd50WithUnits() {
		if (!ld50Checked || complete) {
			ld50Checked = true;
			if (ld50 == null) {
				if (getLd50() == null || getLd50() == 0.0
						|| getLd50units() == null) {
					ld50 = ChemicalWebSearch.getLD50(getCas());
					setLd50(ld50.getQuantity());
					setLd50units(ld50.getUnit());
					setToxic(ChemicalWebSearch.amountToToxicity(ld50));
					ChemicalDao.store(this);
				} else {
					ld50 = (ChemicalMass) ChemicalAmountFactory
							.getChemicalAmount(getLd50(), getLd50units());
				}
			}
		}

		return ld50;
	}

	public Double getMeltingPoint() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.MELTING_POINT);
	}

	public String getMeltingPointString() {
		if (!meltingChecked || !complete) {

			if (mp == null && !meltingChecked) {
				if (getMeltingPoint() == null) {
					final double melting = ChemicalWebSearch
							.fetchMeltingPoint(getCas());
					if (melting == Double.MAX_VALUE) {
						meltingResponse = "Unknown";
					} else {
						setMeltingPoint(melting);
						ChemicalDao.store(this);
						meltingResponse = String
								.format("%.1f %s", mp.getEstimatedValue(), mp
										.getUnit().toString());
					}
				} else {
					mp = Amount.valueOf(getMeltingPoint(),
							javax.measure.unit.SI.CELSIUS);
					meltingResponse = String.format("%.1f %s",
							mp.getEstimatedValue(), mp.getUnit().toString());
				}
			} else if (mp != null) {
				meltingResponse = String.format("%.1f %s",
						mp.getEstimatedValue(), mp.getUnit().toString());
			} else {
				meltingResponse = "Unknown";
			}
			meltingChecked = true;
		}

		return meltingResponse;
	}

	public String getMolarMass() {
		if (molar == null) {
			final double mass = MolecularFormulaManipulator
					.getNaturalExactMass(getMolecularFormula());
			molar = Amount.valueOf(mass, javax.measure.unit.SI.GRAM);
		}
		final String massStr = String.format("%.4f %s",
				molar.getEstimatedValue(), molar.getUnit().toString());
		return massStr;
	}

	private MolecularFormula getMolecularFormula() {
		if (molFormula == null) {
			if (getFormula().equals("N/A")) {
				molFormula = null;
			} else {
				try {
					molFormula = (MolecularFormula) MolecularFormulaManipulator
							.getMolecularFormula(getFormula(),
									DefaultChemObjectBuilder.getInstance());
				} catch (final NumberFormatException e) {
					molFormula = null;
				}
			}
		}

		return molFormula;
	}

	public IAtomContainer getMolecule() {
		if (molecule == null) {
			molecule = ChemicalSubstructureSearcher
					.getMoleculeFromSMILES(getSmiles());
		}

		return molecule;
	}

	public void getMSDS() {
		// final JFileChooser chooser = new JFileChooser();
		// final FileNameExtensionFilter filter = new FileNameExtensionFilter(
		// "PDF files", "pdf");
		// chooser.setFileFilter(filter);
		// final int returnVal =
		// chooser.showSaveDialog(chemicalTable.getParent());
		// if (returnVal == JFileChooser.APPROVE_OPTION) {

		try {
			// final File selected = chooser.getSelectedFile();
			// File f;
			// if (selected.getCanonicalPath().endsWith("pdf")) {
			// f = selected;
			// } else {
			// f = new File(selected.getAbsolutePath() + ".pdf");
			// }
			final File f = File.createTempFile("inventory", ".pdf");
			final OutputStream outputStream = new FileOutputStream(f);
			final InputStream inputStream = ChemicalDao.getMSDS(getCas());
			if (inputStream != null) {
				IOUtils.copy(inputStream, outputStream);
				outputStream.close();
				if (Desktop.isDesktopSupported()) {
					try {
						Desktop.getDesktop().open(f);
					} catch (final IOException ex) {
						Utils.showMessage("Error",
								"Could not open PDF.  Perhaps no program is available?");
					}
				} else {
					Utils.showMessage("Warning",
							"Unable to open SDS, but it has been saved to disk at "
									+ f.getAbsolutePath());
				}
			} else {
				outputStream.close();
				Utils.showMessage("No SDS",
						"No SDS has been stored for this chemical.");
			}
		} catch (final IOException e) {
			Utils.showMessage("Warning",
					"Failed to load SDS from database. Please try again.");
		}
	}

	/**
	 * The table column <code>inventory.chemical.name</code>
	 */
	public java.lang.String getName() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NAME);
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_f</code>
	 */
	public java.lang.Integer getNfpaF() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_F);
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_h</code>
	 */
	public java.lang.Integer getNfpaH() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_H);
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_r</code>
	 */
	public java.lang.Integer getNfpaR() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_R);
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_s</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalNfpaS getNfpaS() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_S);
	}

	public String getOtherNames() {
		if (names == null) {
			names = ChemicalDao.getNames(getCas());
		}

		final String syns = names.getNames();

		return syns == null ? "none" : syns;
	}

	/**
	 * The table column <code>inventory.chemical.smiles</code>
	 */
	public java.lang.String getSmiles() {
		String smiles = getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.SMILES);
		if (smiles == null || smiles.isEmpty()) {
			smiles = "N/A";
		}

		return smiles;
	}

	/**
	 * The table column <code>inventory.chemical.storage_class</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalStorageClass getStorageClass() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.STORAGE_CLASS);
	}

	/**
	 * The table column <code>inventory.chemical.toxic</code>
	 */
	public edu.iup.chem.inventory.db.inventory.enums.ChemicalToxic getToxic() {
		return getValue(edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.TOXIC);
	}

	public boolean isColdStorage() {
		return getCold().equals(ChemicalCold.Yes);
	}

	public boolean isComplete() {
		if (!completionChecked) {
			completionChecked = true;
			if (getComplete() == 0) {
				complete = !(getLd50WithUnits().getQuantity() == 0.0)
						&& !getStorageClass().equals(
								ChemicalStorageClass.Unknown)
						&& !getMeltingPointString().equals("Unknown")
						&& !getBoilingPointString().equals("Unknown")
						&& !getFlashPointString().equals("Unknown")
						&& ChemicalDao.hasMSDS(getCas());
				Byte value;
				if (complete) {
					value = 1;
					setComplete(value);
					ChemicalDao.store(this);
					completionChecked = true;
				}
			} else {
				complete = true;
			}
		}

		return complete;
	}

	public boolean isFlammable() {
		return getFlamm().equals(ChemicalFlamm.Yes);
	}

	public String log() {
		return "ChemicalRecord ["
				+ (getCas() != null ? "getCas()=" + getCas() + ", " : "")
				+ (getStorageClass() != null ? "getStorageClass()="
						+ getStorageClass() + ", " : "")
				+ (getToxic() != null ? "getToxic()=" + getToxic() + ", " : "")
				+ (getCold() != null ? "getCold()=" + getCold() + ", " : "")
				+ (getFlamm() != null ? "getFlamm()=" + getFlamm() + ", " : "")
				+ (getCarc() != null ? "getCarc()=" + getCarc() + ", " : "")
				+ (getNfpaH() != null ? "getNfpaH()=" + getNfpaH() + ", " : "")
				+ (getNfpaF() != null ? "getNfpaF()=" + getNfpaF() + ", " : "")
				+ (getNfpaR() != null ? "getNfpaR()=" + getNfpaR() + ", " : "")
				+ (getNfpaS() != null ? "getNfpaS()=" + getNfpaS() + ", " : "")
				+ (getSmiles() != null ? "getSmiles()=" + getSmiles() + ", "
						: "")
				+ (getName() != null ? "getName()=" + getName() + ", " : "")
				+ (getFormula() != null ? "getFormula()=" + getFormula() + ", "
						: "")
				+ (getCsid() != null ? "getCsid()=" + getCsid() + ", " : "")
				+ (getInchi() != null ? "getInchi()=" + getInchi() : "") + "]";
	}

	public void recheckComplete() {
		completionChecked = false;

	}

	public void setBoilingPoint(final Double value) {
		if (value != null) {
			bp = Amount.valueOf(value, javax.measure.unit.SI.CELSIUS);
			boilingResponse = String.format("%.1f %s", bp.getEstimatedValue(),
					bp.getUnit().toString());
		}
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.BOILING_POINT,
				value);

		if (bp != null && bp.getMaximumValue() < 36.0) {
			setCold(ChemicalCold.Yes);
		}

		boilingChecked = false;
		completionChecked = false;
	}

	/**
	 * The table column <code>inventory.chemical.carc</code>
	 */
	public void setCarc(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalCarc value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CARC,
				value);
	}

	/**
	 * The table column <code>inventory.chemical.cas</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setCas(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CAS,
				value);
	}

	public void setChemicalDensity(final ChemicalDensity value) {
		density = value;
		setDensity(value.getQuantity());
		setDensityUnits(value.getUnit());
		densityChecked = false;

	}

	public void setCid(final Integer value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CID,
				value);
	}

	/**
	 * The table column <code>inventory.chemical.cold</code>
	 */
	public void setCold(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalCold value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.COLD,
				value);
	}

	public void setComplete(final Byte value) {

		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.COMPLETE,
				value);
		completionChecked = false;

	}

	/**
	 * ID for ChemSpider searches
	 */
	public void setCsid(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.CSID,
				value);
	}

	public void setDensity(final Double value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.DENSITY,
				value);
	}

	public void setDensityUnits(final String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.DENSITY_UNITS,
				value);
	}

	public void setDensityWithUnits(final Double value, final String units) {
		density = (ChemicalDensity) ChemicalAmountFactory.getChemicalAmount(
				value, units);
	}

	/**
	 * The table column <code>inventory.chemical.flamm</code>
	 */
	public void setFlamm(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalFlamm value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FLAMM,
				value);
	}

	public void setFlashPoint(final Double value) {
		if (value != null) {
			fp = Amount.valueOf(value, javax.measure.unit.NonSI.FAHRENHEIT);
			flashResponse = String.format("%.1f %s", fp.getEstimatedValue(), fp
					.getUnit().toString());
		}
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FLASH_POINT,
				value);

		if (fp != null && fp.getMaximumValue() < 100.4) {
			setFlamm(ChemicalFlamm.Yes);
		}

		flashChecked = false;
		completionChecked = false;
	}

	/**
	 * The table column <code>inventory.chemical.formula</code>
	 */
	public void setFormula(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.FORMULA,
				value);
	}

	/**
	 * International Chemical Identifier (unique)
	 */
	public void setInchi(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.INCHI,
				value);
	}

	public void setLd50(final Double value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.LD50,
				value);
	}

	public void setLd50units(final String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.LD50UNITS,
				value);
	}

	public void setLd50WithUnits(final ChemicalMass value) {
		ld50 = value;
		setLd50(value.getQuantity());
		setLd50units(value.getUnit());
		setToxic(ChemicalWebSearch.amountToToxicity(ld50));
		ld50Checked = false;

	}

	public void setMeltingPoint(final Double value) {
		if (value != null) {
			mp = Amount.valueOf(value, javax.measure.unit.SI.CELSIUS);
			meltingResponse = String.format("%.1f %s", mp.getEstimatedValue(),
					mp.getUnit().toString());
		}
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.MELTING_POINT,
				value);
		meltingChecked = false;
		completionChecked = false;

	}

	public void setMolecularFormula(final String formula) {
		if (formula == null || formula.isEmpty()) {
			molFormula = null;
		} else {

			molFormula = (MolecularFormula) MolecularFormulaManipulator
					.getMolecularFormula(formula,
							DefaultChemObjectBuilder.getInstance());
		}
	}

	/**
	 * The table column <code>inventory.chemical.name</code>
	 */
	public void setName(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NAME,
				value);
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_f</code>
	 */
	public void setNfpaF(final java.lang.Integer value) {
		if (value != null) {
			setValue(
					edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_F,
					value);
		}
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_h</code>
	 */
	public void setNfpaH(final java.lang.Integer value) {
		if (value != null) {
			setValue(
					edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_H,
					value);
		}
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_r</code>
	 */
	public void setNfpaR(final java.lang.Integer value) {
		if (value != null) {
			setValue(
					edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_R,
					value);
		}
	}

	/**
	 * The table column <code>inventory.chemical.nfpa_s</code>
	 */
	public void setNfpaS(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalNfpaS value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.NFPA_S,
				value);
	}

	/**
	 * The table column <code>inventory.chemical.smiles</code>
	 */
	public void setSmiles(final java.lang.String value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.SMILES,
				value);
	}

	/**
	 * The table column <code>inventory.chemical.storage_class</code>
	 */
	public void setStorageClass(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalStorageClass value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.STORAGE_CLASS,
				value);
		completionChecked = false;
	}

	/**
	 * The table column <code>inventory.chemical.toxic</code>
	 */
	public void setToxic(
			final edu.iup.chem.inventory.db.inventory.enums.ChemicalToxic value) {
		setValue(
				edu.iup.chem.inventory.db.inventory.tables.Chemical.CHEMICAL.TOXIC,
				value);
		completionChecked = false;
	}

	@Override
	public String toString() {
		return getCas() + ": " + getName();
	}
}
