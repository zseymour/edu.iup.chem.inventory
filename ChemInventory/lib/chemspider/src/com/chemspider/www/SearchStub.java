
/**
 * SearchStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.1  Built on : Aug 31, 2011 (12:22:40 CEST)
 */
package com.chemspider.www;



/*
 *  SearchStub java implementation
 */


public class SearchStub extends org.apache.axis2.client.Stub
{
	protected org.apache.axis2.description.AxisOperation[] _operations;

	//hashmaps to keep the fault mapping
	private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
	private java.util.HashMap faultMessageMap = new java.util.HashMap();

	private static int counter = 0;

	private static synchronized java.lang.String getUniqueSuffix(){
		// reset the counter if it is greater than 99999
		if (counter > 99999){
			counter = 0;
		}
		counter = counter + 1; 
		return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
	}


	private void populateAxisService() throws org.apache.axis2.AxisFault {

		//creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService("Search" + getUniqueSuffix());
		addAnonymousOperations();

		//creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[21];

		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getRecordDetails"));
		_service.addOperation(__operation);




		_operations[0]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "predictedPropertiesSearch"));
		_service.addOperation(__operation);




		_operations[1]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "asyncSimpleSearch"));
		_service.addOperation(__operation);




		_operations[2]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getCompoundInfo"));
		_service.addOperation(__operation);




		_operations[3]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getRecordImage"));
		_service.addOperation(__operation);




		_operations[4]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "mol2CSID"));
		_service.addOperation(__operation);




		_operations[5]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "structureSearch"));
		_service.addOperation(__operation);




		_operations[6]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getDataSliceCompounds"));
		_service.addOperation(__operation);




		_operations[7]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "intrinsicPropertiesSearch"));
		_service.addOperation(__operation);




		_operations[8]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getAsyncSearchStatus"));
		_service.addOperation(__operation);




		_operations[9]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "similaritySearch"));
		_service.addOperation(__operation);




		_operations[10]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "simpleSearch"));
		_service.addOperation(__operation);




		_operations[11]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "substructureSearch"));
		_service.addOperation(__operation);




		_operations[12]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getCompoundThumbnail"));
		_service.addOperation(__operation);




		_operations[13]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "cSID2ExtRefs"));
		_service.addOperation(__operation);




		_operations[14]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "lassoSearch"));
		_service.addOperation(__operation);




		_operations[15]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "elementsSearch"));
		_service.addOperation(__operation);




		_operations[16]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getAsyncSearchResult"));
		_service.addOperation(__operation);




		_operations[17]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "simpleSearch2IdList"));
		_service.addOperation(__operation);




		_operations[18]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "molAndDS2CSID"));
		_service.addOperation(__operation);




		_operations[19]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName("http://www.chemspider.com/", "getAsyncSearchResultPart"));
		_service.addOperation(__operation);




		_operations[20]=__operation;


	}

	//populates the faults
	private void populateFaults(){



	}

	/**
	 *Constructor that takes in a configContext
	 */

	public SearchStub(org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint)
					throws org.apache.axis2.AxisFault {
		this(configurationContext,targetEndpoint,false);
	}


	/**
	 * Constructor that takes in a configContext  and useseperate listner
	 */
	public SearchStub(org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint, boolean useSeparateListener)
					throws org.apache.axis2.AxisFault {
		//To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);


		_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
				targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

		//Set the soap version
		_serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);


	}

	/**
	 * Default Constructor
	 */
	public SearchStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {

		this(configurationContext,"http://www.chemspider.com/Search.asmx" );

	}

	/**
	 * Default Constructor
	 */
	public SearchStub() throws org.apache.axis2.AxisFault {

		this("http://www.chemspider.com/Search.asmx" );

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public SearchStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(null,targetEndpoint);
	}




	/**
	 * Auto generated method signature
	 * Get record details: CSID, InChIKey, InChI, SMILES. &lt;span style=&quot;color: red; font-weight: bold;&quot;&gt;This operation is deprecated and will be removed soon - use GetCompoundInfo instead.&lt;/span&gt;
	 * @see com.chemspider.www.Search#getRecordDetails
	 * @param getRecordDetails

	 */



	public  com.chemspider.www.SearchStub.GetRecordDetailsResponse getRecordDetails(

			com.chemspider.www.SearchStub.GetRecordDetails getRecordDetails)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetRecordDetails");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getRecordDetails,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getRecordDetails")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getRecordDetails"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetRecordDetailsResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetRecordDetailsResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordDetails"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordDetails"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordDetails"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by predicted properties. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#predictedPropertiesSearch
	 * @param predictedPropertiesSearch

	 */



	public  com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse predictedPropertiesSearch(

			com.chemspider.www.SearchStub.PredictedPropertiesSearch predictedPropertiesSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/PredictedPropertiesSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					predictedPropertiesSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"predictedPropertiesSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"predictedPropertiesSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"PredictedPropertiesSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"PredictedPropertiesSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"PredictedPropertiesSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by Name, SMILES, InChI, InChIKey, etc. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#asyncSimpleSearch
	 * @param asyncSimpleSearch

	 */



	public  com.chemspider.www.SearchStub.AsyncSimpleSearchResponse asyncSimpleSearch(

			com.chemspider.www.SearchStub.AsyncSimpleSearch asyncSimpleSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/AsyncSimpleSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					asyncSimpleSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"asyncSimpleSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"asyncSimpleSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.AsyncSimpleSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.AsyncSimpleSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AsyncSimpleSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AsyncSimpleSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AsyncSimpleSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Get record details (CSID, StdInChIKey, StdInChI, SMILES) by CSID. Security token is required.
	 * @see com.chemspider.www.Search#getCompoundInfo
	 * @param getCompoundInfo

	 */



	public  com.chemspider.www.SearchStub.GetCompoundInfoResponse getCompoundInfo(

			com.chemspider.www.SearchStub.GetCompoundInfo getCompoundInfo)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetCompoundInfo");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getCompoundInfo,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getCompoundInfo")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getCompoundInfo"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetCompoundInfoResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetCompoundInfoResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundInfo"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundInfo"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundInfo"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Get structure image in PNG format. &lt;span style=&quot;color: red; font-weight: bold;&quot;&gt;This operation is deprecated and will be removed soon - use GetCompoundThumbnail instead.&lt;/span&gt;
	 * @see com.chemspider.www.Search#getRecordImage
	 * @param getRecordImage

	 */



	public  com.chemspider.www.SearchStub.GetRecordImageResponse getRecordImage(

			com.chemspider.www.SearchStub.GetRecordImage getRecordImage)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetRecordImage");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getRecordImage,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getRecordImage")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getRecordImage"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetRecordImageResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetRecordImageResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordImage"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordImage"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetRecordImage"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search for structure that matches provided MOL within the range specified by options. Returns found CSID list. Security token with Service Subscriber role is required.
	 * @see com.chemspider.www.Search#mol2CSID
	 * @param mol2CSID

	 */



	public  com.chemspider.www.SearchStub.Mol2CSIDResponse mol2CSID(

			com.chemspider.www.SearchStub.Mol2CSID mol2CSID)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/Mol2CSID");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					mol2CSID,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"mol2CSID")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"mol2CSID"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.Mol2CSIDResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.Mol2CSIDResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Mol2CSID"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Mol2CSID"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Mol2CSID"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by SMILES or MOL. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#structureSearch
	 * @param structureSearch

	 */



	public  com.chemspider.www.SearchStub.StructureSearchResponse structureSearch(

			com.chemspider.www.SearchStub.StructureSearch structureSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/StructureSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					structureSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"structureSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"structureSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.StructureSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.StructureSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"StructureSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"StructureSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"StructureSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Get list of compounds IDs related to the specified Data Slice. Security token is required.
	 * @see com.chemspider.www.Search#getDataSliceCompounds
	 * @param getDataSliceCompounds

	 */



	public  com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse getDataSliceCompounds(

			com.chemspider.www.SearchStub.GetDataSliceCompounds getDataSliceCompounds)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetDataSliceCompounds");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getDataSliceCompounds,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getDataSliceCompounds")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getDataSliceCompounds"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetDataSliceCompounds"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetDataSliceCompounds"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetDataSliceCompounds"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by intrinsic properties. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#intrinsicPropertiesSearch
	 * @param intrinsicPropertiesSearch

	 */



	public  com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse intrinsicPropertiesSearch(

			com.chemspider.www.SearchStub.IntrinsicPropertiesSearch intrinsicPropertiesSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/IntrinsicPropertiesSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					intrinsicPropertiesSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"intrinsicPropertiesSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"intrinsicPropertiesSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"IntrinsicPropertiesSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"IntrinsicPropertiesSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"IntrinsicPropertiesSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Query asynchronous operation status. Requires transaction ID returned by Asynch&lt;SOMETHING&gt;Search operation. Security token is required.
	 * @see com.chemspider.www.Search#getAsyncSearchStatus
	 * @param getAsyncSearchStatus

	 */



	public  com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse getAsyncSearchStatus(

			com.chemspider.www.SearchStub.GetAsyncSearchStatus getAsyncSearchStatus)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetAsyncSearchStatus");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getAsyncSearchStatus,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getAsyncSearchStatus")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getAsyncSearchStatus"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchStatus"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchStatus"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchStatus"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by SMILES or MOL. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#similaritySearch
	 * @param similaritySearch

	 */



	public  com.chemspider.www.SearchStub.SimilaritySearchResponse similaritySearch(

			com.chemspider.www.SearchStub.SimilaritySearch similaritySearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/SimilaritySearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					similaritySearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"similaritySearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"similaritySearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.SimilaritySearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.SimilaritySearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimilaritySearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimilaritySearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimilaritySearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by Name, SMILES, InChI, InChIKey, etc. Returns a list of found CSIDs (first 100 - please use AsyncSimpleSearch instead if you like to get the full list). Security token is required.
	 * @see com.chemspider.www.Search#simpleSearch
	 * @param simpleSearch

	 */



	public  com.chemspider.www.SearchStub.SimpleSearchResponse simpleSearch(

			com.chemspider.www.SearchStub.SimpleSearch simpleSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/SimpleSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					simpleSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"simpleSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"simpleSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.SimpleSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.SimpleSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by SMILES or MOL. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#substructureSearch
	 * @param substructureSearch

	 */



	public  com.chemspider.www.SearchStub.SubstructureSearchResponse substructureSearch(

			com.chemspider.www.SearchStub.SubstructureSearch substructureSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/SubstructureSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					substructureSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"substructureSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"substructureSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.SubstructureSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.SubstructureSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SubstructureSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SubstructureSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SubstructureSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Get compound thumbnail in PNG format. Security token is required.
	 * @see com.chemspider.www.Search#getCompoundThumbnail
	 * @param getCompoundThumbnail

	 */



	public  com.chemspider.www.SearchStub.GetCompoundThumbnailResponse getCompoundThumbnail(

			com.chemspider.www.SearchStub.GetCompoundThumbnail getCompoundThumbnail)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetCompoundThumbnail");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getCompoundThumbnail,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getCompoundThumbnail")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getCompoundThumbnail"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetCompoundThumbnailResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetCompoundThumbnailResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundThumbnail"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundThumbnail"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCompoundThumbnail"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Return a list of external references (data sources). Security token with Service Subscriber role is required.
	 * @see com.chemspider.www.Search#cSID2ExtRefs
	 * @param cSID2ExtRefs

	 */



	public  com.chemspider.www.SearchStub.CSID2ExtRefsResponse cSID2ExtRefs(

			com.chemspider.www.SearchStub.CSID2ExtRefs cSID2ExtRefs)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/CSID2ExtRefs");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					cSID2ExtRefs,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"cSID2ExtRefs")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"cSID2ExtRefs"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.CSID2ExtRefsResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.CSID2ExtRefsResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CSID2ExtRefs"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CSID2ExtRefs"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CSID2ExtRefs"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by LASSO. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#lassoSearch
	 * @param lassoSearch

	 */



	public  com.chemspider.www.SearchStub.LassoSearchResponse lassoSearch(

			com.chemspider.www.SearchStub.LassoSearch lassoSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/LassoSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					lassoSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"lassoSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"lassoSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.LassoSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.LassoSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LassoSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LassoSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LassoSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by chemical elements. Returns transaction ID which can be used to access search status and result. Security token is required.
	 * @see com.chemspider.www.Search#elementsSearch
	 * @param elementsSearch

	 */



	public  com.chemspider.www.SearchStub.ElementsSearchResponse elementsSearch(

			com.chemspider.www.SearchStub.ElementsSearch elementsSearch)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/ElementsSearch");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					elementsSearch,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"elementsSearch")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"elementsSearch"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.ElementsSearchResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.ElementsSearchResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ElementsSearch"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ElementsSearch"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ElementsSearch"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Returns the list of CSIDs found by Asynch&lt;SOMETHING&gt;Search operation. Security token is required.
	 * @see com.chemspider.www.Search#getAsyncSearchResult
	 * @param getAsyncSearchResult

	 */



	public  com.chemspider.www.SearchStub.GetAsyncSearchResultResponse getAsyncSearchResult(

			com.chemspider.www.SearchStub.GetAsyncSearchResult getAsyncSearchResult)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetAsyncSearchResult");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getAsyncSearchResult,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getAsyncSearchResult")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getAsyncSearchResult"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetAsyncSearchResultResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetAsyncSearchResultResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResult"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResult"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResult"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search by Name, SMILES, InChI, InChIKey, etc. Return a list of found IDs (first 100). &lt;span style=&quot;color: red; font-weight: bold;&quot;&gt;This operation is deprecated and will be removed soon - use SimpleSearch instead.&lt;/span&gt;
	 * @see com.chemspider.www.Search#simpleSearch2IdList
	 * @param simpleSearch2IdList

	 */



	public  com.chemspider.www.SearchStub.SimpleSearch2IdListResponse simpleSearch2IdList(

			com.chemspider.www.SearchStub.SimpleSearch2IdList simpleSearch2IdList)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/SimpleSearch2IdList");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					simpleSearch2IdList,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"simpleSearch2IdList")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"simpleSearch2IdList"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.SimpleSearch2IdListResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.SimpleSearch2IdListResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch2IdList"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch2IdList"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SimpleSearch2IdList"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Search for structure that matches provided MOL within the range specified by options and within the specified list of datasources. Returns found CSID list. Security token with Service Subscriber role is required.
	 * @see com.chemspider.www.Search#molAndDS2CSID
	 * @param molAndDS2CSID

	 */



	public  com.chemspider.www.SearchStub.MolAndDS2CSIDResponse molAndDS2CSID(

			com.chemspider.www.SearchStub.MolAndDS2CSID molAndDS2CSID)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/MolAndDS2CSID");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					molAndDS2CSID,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"molAndDS2CSID")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"molAndDS2CSID"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.MolAndDS2CSIDResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.MolAndDS2CSIDResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"MolAndDS2CSID"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"MolAndDS2CSID"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"MolAndDS2CSID"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}

	/**
	 * Auto generated method signature
	 * Return a slice of the list of CSIDs found by Asynch&lt;SOMETHING&gt;Search operation. Returns full list if start = 0 and count = -1. If (start + count) &gt; (# of results) all results starting at start position are returned. Security token is required.
	 * @see com.chemspider.www.Search#getAsyncSearchResultPart
	 * @param getAsyncSearchResultPart

	 */



	public  com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse getAsyncSearchResultPart(

			com.chemspider.www.SearchStub.GetAsyncSearchResultPart getAsyncSearchResultPart)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
			_operationClient.getOptions().setAction("http://www.chemspider.com/GetAsyncSearchResultPart");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					getAsyncSearchResultPart,
					optimizeContent(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"getAsyncSearchResultPart")), new javax.xml.namespace.QName("http://www.chemspider.com/",
									"getAsyncSearchResultPart"));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse)object;

		}catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null){
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResultPart"))){
					//make the fault by reflection
					try{
						java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResultPart"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						//message class
						java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetAsyncSearchResultPart"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
					}



	/**
	 *  A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
			returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
		}
		return returnMap;
	}



	private javax.xml.namespace.QName[] opNameArray = null;
	private boolean optimizeContent(javax.xml.namespace.QName opName) {


		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;   
			}
		}
		return false;
	}
	//http://www.chemspider.com/Search.asmx
	public static class GetDataSliceCompounds
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetDataSliceCompounds",
				"ns1");



		/**
		 * field for Name
		 */


		protected java.lang.String localName ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localNameTracker = false ;

		public boolean isNameSpecified(){
			return localNameTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getName(){
			return localName;
		}



		/**
		 * Auto generated setter method
		 * @param param Name
		 */
		public void setName(java.lang.String param){
			localNameTracker = param != null;

			this.localName=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetDataSliceCompounds",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetDataSliceCompounds",
							xmlWriter);
				}


			}
			if (localNameTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "name", xmlWriter);


				if (localName==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNameTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"name"));

				if (localName != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
				} else {
					throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetDataSliceCompounds parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetDataSliceCompounds object =
						new GetDataSliceCompounds();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetDataSliceCompounds".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetDataSliceCompounds)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","name").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetRecordImage
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetRecordImage",
				"ns1");



		/**
		 * field for Id
		 */


		protected java.lang.String localId ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localIdTracker = false ;

		public boolean isIdSpecified(){
			return localIdTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getId(){
			return localId;
		}



		/**
		 * Auto generated setter method
		 * @param param Id
		 */
		public void setId(java.lang.String param){
			localIdTracker = param != null;

			this.localId=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetRecordImage",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetRecordImage",
							xmlWriter);
				}


			}
			if (localIdTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "id", xmlWriter);


				if (localId==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localId);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localIdTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"id"));

				if (localId != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
				} else {
					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetRecordImage parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetRecordImage object =
						new GetRecordImage();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetRecordImage".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetRecordImage)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","id").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setId(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfInt
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ArrayOfInt
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for _int
		 * This was an Array!
		 */


		protected int[] local_int ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean local_intTracker = false ;

		public boolean is_intSpecified(){
			return local_intTracker;
		}



		/**
		 * Auto generated getter method
		 * @return int[]
		 */
		 public  int[] get_int(){
			 return local_int;
		 }






		 /**
		  * validate the array for _int
		  */
		 protected void validate_int(int[] param){

		 }


		 /**
		  * Auto generated setter method
		  * @param param _int
		  */
		 public void set_int(int[] param){

			 validate_int(param);

			 local_intTracker = param != null;

			 this.local_int=param;
		 }






		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			 return factory.createOMElement(dataSource,parentQName);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":ArrayOfInt",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "ArrayOfInt",
							 xmlWriter);
				 }


			 }
			 if (local_intTracker){
				 if (local_int!=null) {
					 namespace = "http://www.chemspider.com/";
					 for (int i = 0;i < local_int.length;i++){

						 if (local_int[i]!=java.lang.Integer.MIN_VALUE) {

							 writeStartElement(null, namespace, "int", xmlWriter);


							 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int[i]));
							 xmlWriter.writeEndElement();

						 } else {

							 // we have to do nothing since minOccurs is zero

						 }

					 }
				 } else {

					 throw new org.apache.axis2.databinding.ADBException("int cannot be null!!");

				 }

			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (local_intTracker){
				 if (local_int!=null){
					 for (int i = 0;i < local_int.length;i++){

						 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
								 "int"));
						 elementList.add(
								 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int[i]));



					 }
				 } else {

					 throw new org.apache.axis2.databinding.ADBException("int cannot be null!!");

				 }

			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ArrayOfInt parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ArrayOfInt object =
						 new ArrayOfInt();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"ArrayOfInt".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (ArrayOfInt)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();

					 java.util.ArrayList list1 = new java.util.ArrayList();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","int").equals(reader.getName())){



						 // Process the array and step past its final element's end.
						 list1.add(reader.getElementText());

						 //loop until we find a start element that is not part of this array
						 boolean loopDone1 = false;
						 while(!loopDone1){
							 // Ensure we are at the EndElement
							 while (!reader.isEndElement()){
								 reader.next();
							 }
							 // Step out of this element
							 reader.next();
							 // Step to next element event.
							 while (!reader.isStartElement() && !reader.isEndElement())
								 reader.next();
							 if (reader.isEndElement()){
								 //two continuous end elements means we are exiting the xml structure
								 loopDone1 = true;
							 } else {
								 if (new javax.xml.namespace.QName("http://www.chemspider.com/","int").equals(reader.getName())){
									 list1.add(reader.getElementText());

								 }else{
									 loopDone1 = true;
								 }
							 }
						 }
						 // call the converter utility  to convert and set the array

						 object.set_int((int[])
								 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										 int.class,list1));

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class ElementsSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ElementsSearchResponse",
				"ns1");



		/**
		 * field for ElementsSearchResult
		 */


		protected java.lang.String localElementsSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localElementsSearchResultTracker = false ;

		public boolean isElementsSearchResultSpecified(){
			return localElementsSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getElementsSearchResult(){
			return localElementsSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param ElementsSearchResult
		 */
		public void setElementsSearchResult(java.lang.String param){
			localElementsSearchResultTracker = param != null;

			this.localElementsSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ElementsSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ElementsSearchResponse",
							xmlWriter);
				}


			}
			if (localElementsSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ElementsSearchResult", xmlWriter);


				if (localElementsSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("ElementsSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localElementsSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localElementsSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ElementsSearchResult"));

				if (localElementsSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElementsSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("ElementsSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ElementsSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ElementsSearchResponse object =
						new ElementsSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ElementsSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ElementsSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ElementsSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setElementsSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SubstructureSearchOptions extends StructureSearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = SubstructureSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for MatchTautomers
		 */


		protected boolean localMatchTautomers ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getMatchTautomers(){
			return localMatchTautomers;
		}



		/**
		 * Auto generated setter method
		 * @param param MatchTautomers
		 */
		public void setMatchTautomers(boolean param){

			this.localMatchTautomers=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":SubstructureSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"SubstructureSearchOptions",
						xmlWriter);
			}

			if (localMoleculeTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "Molecule", xmlWriter);


				if (localMolecule==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMolecule);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MatchTautomers", xmlWriter);

			if (false) {

				throw new org.apache.axis2.databinding.ADBException("MatchTautomers cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMatchTautomers));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","SubstructureSearchOptions"));
			if (localMoleculeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"Molecule"));

				if (localMolecule != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolecule));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MatchTautomers"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMatchTautomers));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SubstructureSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SubstructureSearchOptions object =
						new SubstructureSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SubstructureSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SubstructureSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Molecule").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMolecule(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MatchTautomers").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMatchTautomers(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class IntrinsicPropertiesSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = IntrinsicPropertiesSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for EmpiricalFormula
		 */


		protected java.lang.String localEmpiricalFormula ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localEmpiricalFormulaTracker = false ;

		public boolean isEmpiricalFormulaSpecified(){
			return localEmpiricalFormulaTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getEmpiricalFormula(){
			return localEmpiricalFormula;
		}



		/**
		 * Auto generated setter method
		 * @param param EmpiricalFormula
		 */
		public void setEmpiricalFormula(java.lang.String param){
			localEmpiricalFormulaTracker = param != null;

			this.localEmpiricalFormula=param;


		}


		/**
		 * field for MolWeightMin
		 */


		protected double localMolWeightMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMolWeightMin(){
			return localMolWeightMin;
		}



		/**
		 * Auto generated setter method
		 * @param param MolWeightMin
		 */
		public void setMolWeightMin(double param){

			this.localMolWeightMin=param;


		}


		/**
		 * field for MolWeightMax
		 */


		protected double localMolWeightMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMolWeightMax(){
			return localMolWeightMax;
		}



		/**
		 * Auto generated setter method
		 * @param param MolWeightMax
		 */
		public void setMolWeightMax(double param){

			this.localMolWeightMax=param;


		}


		/**
		 * field for NominalMassMin
		 */


		protected double localNominalMassMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getNominalMassMin(){
			return localNominalMassMin;
		}



		/**
		 * Auto generated setter method
		 * @param param NominalMassMin
		 */
		public void setNominalMassMin(double param){

			this.localNominalMassMin=param;


		}


		/**
		 * field for NominalMassMax
		 */


		protected double localNominalMassMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getNominalMassMax(){
			return localNominalMassMax;
		}



		/**
		 * Auto generated setter method
		 * @param param NominalMassMax
		 */
		public void setNominalMassMax(double param){

			this.localNominalMassMax=param;


		}


		/**
		 * field for AverageMassMin
		 */


		protected double localAverageMassMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getAverageMassMin(){
			return localAverageMassMin;
		}



		/**
		 * Auto generated setter method
		 * @param param AverageMassMin
		 */
		public void setAverageMassMin(double param){

			this.localAverageMassMin=param;


		}


		/**
		 * field for AverageMassMax
		 */


		protected double localAverageMassMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getAverageMassMax(){
			return localAverageMassMax;
		}



		/**
		 * Auto generated setter method
		 * @param param AverageMassMax
		 */
		public void setAverageMassMax(double param){

			this.localAverageMassMax=param;


		}


		/**
		 * field for MonoisotopicMassMin
		 */


		protected double localMonoisotopicMassMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMonoisotopicMassMin(){
			return localMonoisotopicMassMin;
		}



		/**
		 * Auto generated setter method
		 * @param param MonoisotopicMassMin
		 */
		public void setMonoisotopicMassMin(double param){

			this.localMonoisotopicMassMin=param;


		}


		/**
		 * field for MonoisotopicMassMax
		 */


		protected double localMonoisotopicMassMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMonoisotopicMassMax(){
			return localMonoisotopicMassMax;
		}



		/**
		 * Auto generated setter method
		 * @param param MonoisotopicMassMax
		 */
		public void setMonoisotopicMassMax(double param){

			this.localMonoisotopicMassMax=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":IntrinsicPropertiesSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"IntrinsicPropertiesSearchOptions",
						xmlWriter);
			}

			if (localEmpiricalFormulaTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "EmpiricalFormula", xmlWriter);


				if (localEmpiricalFormula==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("EmpiricalFormula cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localEmpiricalFormula);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MolWeightMin", xmlWriter);

			if (java.lang.Double.isNaN(localMolWeightMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolWeightMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MolWeightMax", xmlWriter);

			if (java.lang.Double.isNaN(localMolWeightMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolWeightMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "NominalMassMin", xmlWriter);

			if (java.lang.Double.isNaN(localNominalMassMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNominalMassMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "NominalMassMax", xmlWriter);

			if (java.lang.Double.isNaN(localNominalMassMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNominalMassMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "AverageMassMin", xmlWriter);

			if (java.lang.Double.isNaN(localAverageMassMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageMassMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "AverageMassMax", xmlWriter);

			if (java.lang.Double.isNaN(localAverageMassMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageMassMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MonoisotopicMassMin", xmlWriter);

			if (java.lang.Double.isNaN(localMonoisotopicMassMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMonoisotopicMassMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MonoisotopicMassMax", xmlWriter);

			if (java.lang.Double.isNaN(localMonoisotopicMassMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMonoisotopicMassMax));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","IntrinsicPropertiesSearchOptions"));
			if (localEmpiricalFormulaTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"EmpiricalFormula"));

				if (localEmpiricalFormula != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEmpiricalFormula));
				} else {
					throw new org.apache.axis2.databinding.ADBException("EmpiricalFormula cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MolWeightMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolWeightMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MolWeightMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolWeightMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"NominalMassMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNominalMassMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"NominalMassMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNominalMassMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"AverageMassMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageMassMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"AverageMassMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageMassMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MonoisotopicMassMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMonoisotopicMassMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MonoisotopicMassMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMonoisotopicMassMax));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static IntrinsicPropertiesSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				IntrinsicPropertiesSearchOptions object =
						new IntrinsicPropertiesSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"IntrinsicPropertiesSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IntrinsicPropertiesSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","EmpiricalFormula").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setEmpiricalFormula(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MolWeightMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMolWeightMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMolWeightMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MolWeightMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMolWeightMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMolWeightMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","NominalMassMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setNominalMassMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setNominalMassMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","NominalMassMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setNominalMassMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setNominalMassMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","AverageMassMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setAverageMassMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setAverageMassMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","AverageMassMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setAverageMassMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setAverageMassMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MonoisotopicMassMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMonoisotopicMassMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMonoisotopicMassMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MonoisotopicMassMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMonoisotopicMassMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMonoisotopicMassMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetRecordImageResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetRecordImageResponse",
				"ns1");



		/**
		 * field for GetRecordImageResult
		 */


		protected javax.activation.DataHandler localGetRecordImageResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetRecordImageResultTracker = false ;

		public boolean isGetRecordImageResultSpecified(){
			return localGetRecordImageResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return javax.activation.DataHandler
		 */
		public  javax.activation.DataHandler getGetRecordImageResult(){
			return localGetRecordImageResult;
		}



		/**
		 * Auto generated setter method
		 * @param param GetRecordImageResult
		 */
		public void setGetRecordImageResult(javax.activation.DataHandler param){
			localGetRecordImageResultTracker = param != null;

			this.localGetRecordImageResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetRecordImageResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetRecordImageResponse",
							xmlWriter);
				}


			}
			if (localGetRecordImageResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "GetRecordImageResult", xmlWriter);


				if (localGetRecordImageResult!=null)  {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localGetRecordImageResult, null, true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for GetRecordImageResult", ex);
					}
				} else {

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localGetRecordImageResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"GetRecordImageResult"));

				elementList.add(localGetRecordImageResult);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetRecordImageResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetRecordImageResponse object =
						new GetRecordImageResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetRecordImageResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetRecordImageResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetRecordImageResult").equals(reader.getName())){

						object.setGetRecordImageResult(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class CommonSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = CommonSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for Complexity
		 */


		protected EComplexity localComplexity ;


		/**
		 * Auto generated getter method
		 * @return EComplexity
		 */
		public  EComplexity getComplexity(){
			return localComplexity;
		}



		/**
		 * Auto generated setter method
		 * @param param Complexity
		 */
		public void setComplexity(EComplexity param){

			this.localComplexity=param;


		}


		/**
		 * field for Isotopic
		 */


		protected EIsotopic localIsotopic ;


		/**
		 * Auto generated getter method
		 * @return EIsotopic
		 */
		public  EIsotopic getIsotopic(){
			return localIsotopic;
		}



		/**
		 * Auto generated setter method
		 * @param param Isotopic
		 */
		public void setIsotopic(EIsotopic param){

			this.localIsotopic=param;


		}


		/**
		 * field for HasSpectra
		 */


		protected boolean localHasSpectra ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getHasSpectra(){
			return localHasSpectra;
		}



		/**
		 * Auto generated setter method
		 * @param param HasSpectra
		 */
		public void setHasSpectra(boolean param){

			this.localHasSpectra=param;


		}


		/**
		 * field for HasPatents
		 */


		protected boolean localHasPatents ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getHasPatents(){
			return localHasPatents;
		}



		/**
		 * Auto generated setter method
		 * @param param HasPatents
		 */
		public void setHasPatents(boolean param){

			this.localHasPatents=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":CommonSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"CommonSearchOptions",
						xmlWriter);
			}


			if (localComplexity==null){
				throw new org.apache.axis2.databinding.ADBException("Complexity cannot be null!!");
			}
			localComplexity.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","Complexity"),
					xmlWriter);

			if (localIsotopic==null){
				throw new org.apache.axis2.databinding.ADBException("Isotopic cannot be null!!");
			}
			localIsotopic.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","Isotopic"),
					xmlWriter);

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HasSpectra", xmlWriter);

			if (false) {

				throw new org.apache.axis2.databinding.ADBException("HasSpectra cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasSpectra));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HasPatents", xmlWriter);

			if (false) {

				throw new org.apache.axis2.databinding.ADBException("HasPatents cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasPatents));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","CommonSearchOptions"));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"Complexity"));


			if (localComplexity==null){
				throw new org.apache.axis2.databinding.ADBException("Complexity cannot be null!!");
			}
			elementList.add(localComplexity);

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"Isotopic"));


			if (localIsotopic==null){
				throw new org.apache.axis2.databinding.ADBException("Isotopic cannot be null!!");
			}
			elementList.add(localIsotopic);

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HasSpectra"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasSpectra));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HasPatents"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasPatents));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static CommonSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				CommonSearchOptions object =
						new CommonSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"CommonSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CommonSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Complexity").equals(reader.getName())){

						object.setComplexity(EComplexity.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Isotopic").equals(reader.getName())){

						object.setIsotopic(EIsotopic.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HasSpectra").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setHasSpectra(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HasPatents").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setHasPatents(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class StructureSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"StructureSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected ExactStructureSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ExactStructureSearchOptions
		 */
		public  ExactStructureSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(ExactStructureSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":StructureSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"StructureSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static StructureSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				StructureSearch object =
						new StructureSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"StructureSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StructureSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(ExactStructureSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class EIsotopic
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"EIsotopic",
				"ns1");



		/**
		 * field for EIsotopic
		 */


		protected java.lang.String localEIsotopic ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected EIsotopic(java.lang.String value, boolean isRegisterValue) {
			localEIsotopic = value;
			if (isRegisterValue){

				_table_.put(localEIsotopic, this);

			}

		}

		public static final java.lang.String _Any =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Any");

		public static final java.lang.String _Labeled =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Labeled");

		public static final java.lang.String _NotLabeled =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NotLabeled");

		public static final EIsotopic Any =
				new EIsotopic(_Any,true);

		public static final EIsotopic Labeled =
				new EIsotopic(_Labeled,true);

		public static final EIsotopic NotLabeled =
				new EIsotopic(_NotLabeled,true);


		public java.lang.String getValue() { return localEIsotopic;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localEIsotopic.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":EIsotopic",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "EIsotopic",
							 xmlWriter);
				 }
			 }

			 if (localEIsotopic==null){

				 throw new org.apache.axis2.databinding.ADBException("EIsotopic cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localEIsotopic);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEIsotopic)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static EIsotopic fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 EIsotopic enumeration = (EIsotopic)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static EIsotopic fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static EIsotopic fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return EIsotopic.Factory.fromString(content,namespaceUri);
				 } else {
					 return EIsotopic.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static EIsotopic parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 EIsotopic object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = EIsotopic.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = EIsotopic.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class ArrayOfAnyTypeE
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ArrayOfAnyType",
				"ns1");



		/**
		 * field for ArrayOfAnyType
		 */


		protected ArrayOfAnyType localArrayOfAnyType ;


		/**
		 * Auto generated getter method
		 * @return ArrayOfAnyType
		 */
		public  ArrayOfAnyType getArrayOfAnyType(){
			return localArrayOfAnyType;
		}



		/**
		 * Auto generated setter method
		 * @param param ArrayOfAnyType
		 */
		public void setArrayOfAnyType(ArrayOfAnyType param){

			this.localArrayOfAnyType=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			if (localArrayOfAnyType==null){
				java.lang.String namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ArrayOfAnyType", xmlWriter);

				// write the nil attribute
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
				xmlWriter.writeEndElement();
			}else{
				localArrayOfAnyType.serialize(MY_QNAME,xmlWriter);
			}


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it

			if (localArrayOfAnyType==null){
				return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
			}else{
				return localArrayOfAnyType.getPullParser(MY_QNAME);
			}


		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ArrayOfAnyTypeE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ArrayOfAnyTypeE object =
						new ArrayOfAnyTypeE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)){
						// Skip the element and report the null value.  It cannot have subelements.
						while (!reader.isEndElement())
							reader.next();

						return object;


					}



					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ArrayOfAnyType").equals(reader.getName())){

								nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
								if ("true".equals(nillableValue) || "1".equals(nillableValue)){
									object.setArrayOfAnyType(null);
									reader.next();

								}else{

									object.setArrayOfAnyType(ArrayOfAnyType.Factory.parse(reader));
								}
							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ExtRef
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ExtRef
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for CSID
		 */


		protected int localCSID ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getCSID(){
			return localCSID;
		}



		/**
		 * Auto generated setter method
		 * @param param CSID
		 */
		public void setCSID(int param){

			this.localCSID=param;


		}


		/**
		 * field for Ds_name
		 */


		protected java.lang.String localDs_name ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localDs_nameTracker = false ;

		public boolean isDs_nameSpecified(){
			return localDs_nameTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getDs_name(){
			return localDs_name;
		}



		/**
		 * Auto generated setter method
		 * @param param Ds_name
		 */
		public void setDs_name(java.lang.String param){
			localDs_nameTracker = param != null;

			this.localDs_name=param;


		}


		/**
		 * field for Ds_url
		 */


		protected java.lang.String localDs_url ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localDs_urlTracker = false ;

		public boolean isDs_urlSpecified(){
			return localDs_urlTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getDs_url(){
			return localDs_url;
		}



		/**
		 * Auto generated setter method
		 * @param param Ds_url
		 */
		public void setDs_url(java.lang.String param){
			localDs_urlTracker = param != null;

			this.localDs_url=param;


		}


		/**
		 * field for Ext_id
		 */


		protected java.lang.String localExt_id ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localExt_idTracker = false ;

		public boolean isExt_idSpecified(){
			return localExt_idTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getExt_id(){
			return localExt_id;
		}



		/**
		 * Auto generated setter method
		 * @param param Ext_id
		 */
		public void setExt_id(java.lang.String param){
			localExt_idTracker = param != null;

			this.localExt_id=param;


		}


		/**
		 * field for Ext_url
		 */


		protected java.lang.String localExt_url ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localExt_urlTracker = false ;

		public boolean isExt_urlSpecified(){
			return localExt_urlTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getExt_url(){
			return localExt_url;
		}



		/**
		 * Auto generated setter method
		 * @param param Ext_url
		 */
		public void setExt_url(java.lang.String param){
			localExt_urlTracker = param != null;

			this.localExt_url=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ExtRef",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ExtRef",
							xmlWriter);
				}


			}

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "CSID", xmlWriter);

			if (localCSID==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("CSID cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			}

			xmlWriter.writeEndElement();
			if (localDs_nameTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ds_name", xmlWriter);


				if (localDs_name==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("ds_name cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localDs_name);

				}

				xmlWriter.writeEndElement();
			} if (localDs_urlTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ds_url", xmlWriter);


				if (localDs_url==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("ds_url cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localDs_url);

				}

				xmlWriter.writeEndElement();
			} if (localExt_idTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ext_id", xmlWriter);


				if (localExt_id==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("ext_id cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localExt_id);

				}

				xmlWriter.writeEndElement();
			} if (localExt_urlTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ext_url", xmlWriter);


				if (localExt_url==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("ext_url cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localExt_url);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"CSID"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			if (localDs_nameTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ds_name"));

				if (localDs_name != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDs_name));
				} else {
					throw new org.apache.axis2.databinding.ADBException("ds_name cannot be null!!");
				}
			} if (localDs_urlTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ds_url"));

				if (localDs_url != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDs_url));
				} else {
					throw new org.apache.axis2.databinding.ADBException("ds_url cannot be null!!");
				}
			} if (localExt_idTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ext_id"));

				if (localExt_id != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExt_id));
				} else {
					throw new org.apache.axis2.databinding.ADBException("ext_id cannot be null!!");
				}
			} if (localExt_urlTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ext_url"));

				if (localExt_url != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExt_url));
				} else {
					throw new org.apache.axis2.databinding.ADBException("ext_url cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ExtRef parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ExtRef object =
						new ExtRef();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ExtRef".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExtRef)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CSID").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setCSID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ds_name").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setDs_name(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ds_url").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setDs_url(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ext_id").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setExt_id(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ext_url").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setExt_url(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfExtRef
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ArrayOfExtRef
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for ExtRef
		 * This was an Array!
		 */


		protected ExtRef[] localExtRef ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localExtRefTracker = false ;

		public boolean isExtRefSpecified(){
			return localExtRefTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ExtRef[]
		 */
		 public  ExtRef[] getExtRef(){
			 return localExtRef;
		 }






		 /**
		  * validate the array for ExtRef
		  */
		 protected void validateExtRef(ExtRef[] param){

		 }


		 /**
		  * Auto generated setter method
		  * @param param ExtRef
		  */
		 public void setExtRef(ExtRef[] param){

			 validateExtRef(param);

			 localExtRefTracker = param != null;

			 this.localExtRef=param;
		 }



		 /**
		  * Auto generated add method for the array for convenience
		  * @param param ExtRef
		  */
		 public void addExtRef(ExtRef param){
			 if (localExtRef == null){
				 localExtRef = new ExtRef[]{};
			 }


			 //update the setting tracker
			 localExtRefTracker = true;


			 java.util.List list =
					 org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtRef);
			 list.add(param);
			 this.localExtRef =
					 (ExtRef[])list.toArray(
							 new ExtRef[list.size()]);

		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			 return factory.createOMElement(dataSource,parentQName);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":ArrayOfExtRef",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "ArrayOfExtRef",
							 xmlWriter);
				 }


			 }
			 if (localExtRefTracker){
				 if (localExtRef!=null){
					 for (int i = 0;i < localExtRef.length;i++){
						 if (localExtRef[i] != null){
							 localExtRef[i].serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","ExtRef"),
									 xmlWriter);
						 } else {

							 // we don't have to do any thing since minOccures is zero

						 }

					 }
				 } else {

					 throw new org.apache.axis2.databinding.ADBException("ExtRef cannot be null!!");

				 }
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localExtRefTracker){
				 if (localExtRef!=null) {
					 for (int i = 0;i < localExtRef.length;i++){

						 if (localExtRef[i] != null){
							 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
									 "ExtRef"));
							 elementList.add(localExtRef[i]);
						 } else {

							 // nothing to do

						 }

					 }
				 } else {

					 throw new org.apache.axis2.databinding.ADBException("ExtRef cannot be null!!");

				 }

			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ArrayOfExtRef parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ArrayOfExtRef object =
						 new ArrayOfExtRef();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"ArrayOfExtRef".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (ArrayOfExtRef)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();

					 java.util.ArrayList list1 = new java.util.ArrayList();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ExtRef").equals(reader.getName())){



						 // Process the array and step past its final element's end.
						 list1.add(ExtRef.Factory.parse(reader));

						 //loop until we find a start element that is not part of this array
						 boolean loopDone1 = false;
						 while(!loopDone1){
							 // We should be at the end element, but make sure
							 while (!reader.isEndElement())
								 reader.next();
							 // Step out of this element
							 reader.next();
							 // Step to next element event.
							 while (!reader.isStartElement() && !reader.isEndElement())
								 reader.next();
							 if (reader.isEndElement()){
								 //two continuous end elements means we are exiting the xml structure
								 loopDone1 = true;
							 } else {
								 if (new javax.xml.namespace.QName("http://www.chemspider.com/","ExtRef").equals(reader.getName())){
									 list1.add(ExtRef.Factory.parse(reader));

								 }else{
									 loopDone1 = true;
								 }
							 }
						 }
						 // call the converter utility  to convert and set the array

						 object.setExtRef((ExtRef[])
								 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										 ExtRef.class,
										 list1));

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class GetRecordDetails
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetRecordDetails",
				"ns1");



		/**
		 * field for Id
		 */


		protected java.lang.String localId ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localIdTracker = false ;

		public boolean isIdSpecified(){
			return localIdTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getId(){
			return localId;
		}



		/**
		 * Auto generated setter method
		 * @param param Id
		 */
		public void setId(java.lang.String param){
			localIdTracker = param != null;

			this.localId=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetRecordDetails",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetRecordDetails",
							xmlWriter);
				}


			}
			if (localIdTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "id", xmlWriter);


				if (localId==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localId);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localIdTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"id"));

				if (localId != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
				} else {
					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetRecordDetails parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetRecordDetails object =
						new GetRecordDetails();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetRecordDetails".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetRecordDetails)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","id").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setId(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SimpleSearch2IdList
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimpleSearch2IdList",
				"ns1");



		/**
		 * field for Query
		 */


		protected java.lang.String localQuery ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localQueryTracker = false ;

		public boolean isQuerySpecified(){
			return localQueryTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getQuery(){
			return localQuery;
		}



		/**
		 * Auto generated setter method
		 * @param param Query
		 */
		public void setQuery(java.lang.String param){
			localQueryTracker = param != null;

			this.localQuery=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SimpleSearch2IdList",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SimpleSearch2IdList",
							xmlWriter);
				}


			}
			if (localQueryTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "query", xmlWriter);


				if (localQuery==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localQuery);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localQueryTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"query"));

				if (localQuery != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery));
				} else {
					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SimpleSearch2IdList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SimpleSearch2IdList object =
						new SimpleSearch2IdList();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SimpleSearch2IdList".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SimpleSearch2IdList)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","query").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setQuery(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SubstructureSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SubstructureSearchResponse",
				"ns1");



		/**
		 * field for SubstructureSearchResult
		 */


		protected java.lang.String localSubstructureSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localSubstructureSearchResultTracker = false ;

		public boolean isSubstructureSearchResultSpecified(){
			return localSubstructureSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getSubstructureSearchResult(){
			return localSubstructureSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param SubstructureSearchResult
		 */
		public void setSubstructureSearchResult(java.lang.String param){
			localSubstructureSearchResultTracker = param != null;

			this.localSubstructureSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SubstructureSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SubstructureSearchResponse",
							xmlWriter);
				}


			}
			if (localSubstructureSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "SubstructureSearchResult", xmlWriter);


				if (localSubstructureSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("SubstructureSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localSubstructureSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localSubstructureSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"SubstructureSearchResult"));

				if (localSubstructureSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubstructureSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("SubstructureSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SubstructureSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SubstructureSearchResponse object =
						new SubstructureSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SubstructureSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SubstructureSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SubstructureSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setSubstructureSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class PredictedPropertiesSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"PredictedPropertiesSearchResponse",
				"ns1");



		/**
		 * field for PredictedPropertiesSearchResult
		 */


		protected java.lang.String localPredictedPropertiesSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localPredictedPropertiesSearchResultTracker = false ;

		public boolean isPredictedPropertiesSearchResultSpecified(){
			return localPredictedPropertiesSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getPredictedPropertiesSearchResult(){
			return localPredictedPropertiesSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param PredictedPropertiesSearchResult
		 */
		public void setPredictedPropertiesSearchResult(java.lang.String param){
			localPredictedPropertiesSearchResultTracker = param != null;

			this.localPredictedPropertiesSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":PredictedPropertiesSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"PredictedPropertiesSearchResponse",
							xmlWriter);
				}


			}
			if (localPredictedPropertiesSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "PredictedPropertiesSearchResult", xmlWriter);


				if (localPredictedPropertiesSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("PredictedPropertiesSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localPredictedPropertiesSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPredictedPropertiesSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"PredictedPropertiesSearchResult"));

				if (localPredictedPropertiesSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPredictedPropertiesSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("PredictedPropertiesSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static PredictedPropertiesSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				PredictedPropertiesSearchResponse object =
						new PredictedPropertiesSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"PredictedPropertiesSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (PredictedPropertiesSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","PredictedPropertiesSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setPredictedPropertiesSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchResultResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchResultResponse",
				"ns1");



		/**
		 * field for GetAsyncSearchResultResult
		 */


		protected ArrayOfInt localGetAsyncSearchResultResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetAsyncSearchResultResultTracker = false ;

		public boolean isGetAsyncSearchResultResultSpecified(){
			return localGetAsyncSearchResultResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getGetAsyncSearchResultResult(){
			 return localGetAsyncSearchResultResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param GetAsyncSearchResultResult
		  */
		 public void setGetAsyncSearchResultResult(ArrayOfInt param){
			 localGetAsyncSearchResultResultTracker = param != null;

			 this.localGetAsyncSearchResultResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":GetAsyncSearchResultResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "GetAsyncSearchResultResponse",
							 xmlWriter);
				 }


			 }
			 if (localGetAsyncSearchResultResultTracker){
				 if (localGetAsyncSearchResultResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchResultResult cannot be null!!");
				 }
				 localGetAsyncSearchResultResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchResultResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localGetAsyncSearchResultResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "GetAsyncSearchResultResult"));


				 if (localGetAsyncSearchResultResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchResultResult cannot be null!!");
				 }
				 elementList.add(localGetAsyncSearchResultResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static GetAsyncSearchResultResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 GetAsyncSearchResultResponse object =
						 new GetAsyncSearchResultResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"GetAsyncSearchResultResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (GetAsyncSearchResultResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchResultResult").equals(reader.getName())){

						 object.setGetAsyncSearchResultResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class GetCompoundInfoResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetCompoundInfoResponse",
				"ns1");



		/**
		 * field for GetCompoundInfoResult
		 */


		protected CompoundInfo localGetCompoundInfoResult ;


		/**
		 * Auto generated getter method
		 * @return CompoundInfo
		 */
		public  CompoundInfo getGetCompoundInfoResult(){
			return localGetCompoundInfoResult;
		}



		/**
		 * Auto generated setter method
		 * @param param GetCompoundInfoResult
		 */
		public void setGetCompoundInfoResult(CompoundInfo param){

			this.localGetCompoundInfoResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetCompoundInfoResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetCompoundInfoResponse",
							xmlWriter);
				}


			}

			if (localGetCompoundInfoResult==null){
				throw new org.apache.axis2.databinding.ADBException("GetCompoundInfoResult cannot be null!!");
			}
			localGetCompoundInfoResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetCompoundInfoResult"),
					xmlWriter);

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"GetCompoundInfoResult"));


			if (localGetCompoundInfoResult==null){
				throw new org.apache.axis2.databinding.ADBException("GetCompoundInfoResult cannot be null!!");
			}
			elementList.add(localGetCompoundInfoResult);


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetCompoundInfoResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetCompoundInfoResponse object =
						new GetCompoundInfoResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetCompoundInfoResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCompoundInfoResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetCompoundInfoResult").equals(reader.getName())){

						object.setGetCompoundInfoResult(CompoundInfo.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ExtensionMapper{

		public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
				java.lang.String typeName,
				javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ESimilarityType".equals(typeName)){

				return  ESimilarityType.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ArrayOfInt".equals(typeName)){

				return  ArrayOfInt.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"EMatchType".equals(typeName)){

				return  EMatchType.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ERequestStatus".equals(typeName)){

				return  ERequestStatus.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"SearchOptions".equals(typeName)){

				return  SearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ExactSearchOptions".equals(typeName)){

				return  ExactSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"SubstructureSearchOptions".equals(typeName)){

				return  SubstructureSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"SimilaritySearchOptions".equals(typeName)){

				return  SimilaritySearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"IntrinsicPropertiesSearchOptions".equals(typeName)){

				return  IntrinsicPropertiesSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"PredictedPropertiesSearchOptions".equals(typeName)){

				return  PredictedPropertiesSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"CommonSearchOptions".equals(typeName)){

				return  CommonSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ElementsSearchOptions".equals(typeName)){

				return  ElementsSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"EIsotopic".equals(typeName)){

				return  EIsotopic.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"LassoSearchOptions".equals(typeName)){

				return  LassoSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ExactStructureSearchOptions".equals(typeName)){

				return  ExactStructureSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ArrayOfString".equals(typeName)){

				return  ArrayOfString.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ExtRef".equals(typeName)){

				return  ExtRef.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ArrayOfExtRef".equals(typeName)){

				return  ArrayOfExtRef.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"ArrayOfAnyType".equals(typeName)){

				return  ArrayOfAnyType.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"StructureSearchOptions".equals(typeName)){

				return  StructureSearchOptions.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"EComplexity".equals(typeName)){

				return  EComplexity.Factory.parse(reader);


			}


			if (
					"http://www.chemspider.com/".equals(namespaceURI) &&
					"CompoundInfo".equals(typeName)){

				return  CompoundInfo.Factory.parse(reader);


			}


			throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class GetRecordDetailsResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetRecordDetailsResponse",
				"ns1");



		/**
		 * field for GetRecordDetailsResult
		 */


		protected ArrayOfAnyType localGetRecordDetailsResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetRecordDetailsResultTracker = false ;

		public boolean isGetRecordDetailsResultSpecified(){
			return localGetRecordDetailsResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfAnyType
		 */
		public  ArrayOfAnyType getGetRecordDetailsResult(){
			return localGetRecordDetailsResult;
		}



		/**
		 * Auto generated setter method
		 * @param param GetRecordDetailsResult
		 */
		public void setGetRecordDetailsResult(ArrayOfAnyType param){
			localGetRecordDetailsResultTracker = param != null;

			this.localGetRecordDetailsResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetRecordDetailsResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetRecordDetailsResponse",
							xmlWriter);
				}


			}
			if (localGetRecordDetailsResultTracker){
				if (localGetRecordDetailsResult==null){
					throw new org.apache.axis2.databinding.ADBException("GetRecordDetailsResult cannot be null!!");
				}
				localGetRecordDetailsResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetRecordDetailsResult"),
						xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localGetRecordDetailsResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"GetRecordDetailsResult"));


				if (localGetRecordDetailsResult==null){
					throw new org.apache.axis2.databinding.ADBException("GetRecordDetailsResult cannot be null!!");
				}
				elementList.add(localGetRecordDetailsResult);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetRecordDetailsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetRecordDetailsResponse object =
						new GetRecordDetailsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetRecordDetailsResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetRecordDetailsResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetRecordDetailsResult").equals(reader.getName())){

						object.setGetRecordDetailsResult(ArrayOfAnyType.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ERequestStatusE
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ERequestStatus",
				"ns1");



		/**
		 * field for ERequestStatus
		 */


		protected ERequestStatus localERequestStatus ;


		/**
		 * Auto generated getter method
		 * @return ERequestStatus
		 */
		public  ERequestStatus getERequestStatus(){
			return localERequestStatus;
		}



		/**
		 * Auto generated setter method
		 * @param param ERequestStatus
		 */
		public void setERequestStatus(ERequestStatus param){

			this.localERequestStatus=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			if (localERequestStatus==null){
				throw new org.apache.axis2.databinding.ADBException("ERequestStatus cannot be null!");
			}
			localERequestStatus.serialize(MY_QNAME,xmlWriter);


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it
			return localERequestStatus.getPullParser(MY_QNAME);

		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ERequestStatusE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ERequestStatusE object =
						new ERequestStatusE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ERequestStatus").equals(reader.getName())){

								object.setERequestStatus(ERequestStatus.Factory.parse(reader));

							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class IntrinsicPropertiesSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"IntrinsicPropertiesSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected IntrinsicPropertiesSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return IntrinsicPropertiesSearchOptions
		 */
		public  IntrinsicPropertiesSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(IntrinsicPropertiesSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":IntrinsicPropertiesSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"IntrinsicPropertiesSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static IntrinsicPropertiesSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				IntrinsicPropertiesSearch object =
						new IntrinsicPropertiesSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"IntrinsicPropertiesSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IntrinsicPropertiesSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(IntrinsicPropertiesSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfIntE
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ArrayOfInt",
				"ns1");



		/**
		 * field for ArrayOfInt
		 */


		protected ArrayOfInt localArrayOfInt ;


		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		public  ArrayOfInt getArrayOfInt(){
			return localArrayOfInt;
		}



		/**
		 * Auto generated setter method
		 * @param param ArrayOfInt
		 */
		public void setArrayOfInt(ArrayOfInt param){

			this.localArrayOfInt=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			if (localArrayOfInt==null){
				java.lang.String namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ArrayOfInt", xmlWriter);

				// write the nil attribute
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
				xmlWriter.writeEndElement();
			}else{
				localArrayOfInt.serialize(MY_QNAME,xmlWriter);
			}


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it

			if (localArrayOfInt==null){
				return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
			}else{
				return localArrayOfInt.getPullParser(MY_QNAME);
			}


		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ArrayOfIntE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ArrayOfIntE object =
						new ArrayOfIntE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)){
						// Skip the element and report the null value.  It cannot have subelements.
						while (!reader.isEndElement())
							reader.next();

						return object;


					}



					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ArrayOfInt").equals(reader.getName())){

								nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
								if ("true".equals(nillableValue) || "1".equals(nillableValue)){
									object.setArrayOfInt(null);
									reader.next();

								}else{

									object.setArrayOfInt(ArrayOfInt.Factory.parse(reader));
								}
							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class CompoundInfo
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = CompoundInfo
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for CSID
		 */


		protected int localCSID ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getCSID(){
			return localCSID;
		}



		/**
		 * Auto generated setter method
		 * @param param CSID
		 */
		public void setCSID(int param){

			this.localCSID=param;


		}


		/**
		 * field for InChI
		 */


		protected java.lang.String localInChI ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localInChITracker = false ;

		public boolean isInChISpecified(){
			return localInChITracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getInChI(){
			return localInChI;
		}



		/**
		 * Auto generated setter method
		 * @param param InChI
		 */
		public void setInChI(java.lang.String param){
			localInChITracker = param != null;

			this.localInChI=param;


		}


		/**
		 * field for InChIKey
		 */


		protected java.lang.String localInChIKey ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localInChIKeyTracker = false ;

		public boolean isInChIKeySpecified(){
			return localInChIKeyTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getInChIKey(){
			return localInChIKey;
		}



		/**
		 * Auto generated setter method
		 * @param param InChIKey
		 */
		public void setInChIKey(java.lang.String param){
			localInChIKeyTracker = param != null;

			this.localInChIKey=param;


		}


		/**
		 * field for SMILES
		 */


		protected java.lang.String localSMILES ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localSMILESTracker = false ;

		public boolean isSMILESSpecified(){
			return localSMILESTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getSMILES(){
			return localSMILES;
		}



		/**
		 * Auto generated setter method
		 * @param param SMILES
		 */
		public void setSMILES(java.lang.String param){
			localSMILESTracker = param != null;

			this.localSMILES=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":CompoundInfo",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"CompoundInfo",
							xmlWriter);
				}


			}

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "CSID", xmlWriter);

			if (localCSID==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("CSID cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			}

			xmlWriter.writeEndElement();
			if (localInChITracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "InChI", xmlWriter);


				if (localInChI==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("InChI cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localInChI);

				}

				xmlWriter.writeEndElement();
			} if (localInChIKeyTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "InChIKey", xmlWriter);


				if (localInChIKey==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("InChIKey cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localInChIKey);

				}

				xmlWriter.writeEndElement();
			} if (localSMILESTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "SMILES", xmlWriter);


				if (localSMILES==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("SMILES cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localSMILES);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"CSID"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			if (localInChITracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"InChI"));

				if (localInChI != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInChI));
				} else {
					throw new org.apache.axis2.databinding.ADBException("InChI cannot be null!!");
				}
			} if (localInChIKeyTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"InChIKey"));

				if (localInChIKey != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInChIKey));
				} else {
					throw new org.apache.axis2.databinding.ADBException("InChIKey cannot be null!!");
				}
			} if (localSMILESTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"SMILES"));

				if (localSMILES != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSMILES));
				} else {
					throw new org.apache.axis2.databinding.ADBException("SMILES cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static CompoundInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				CompoundInfo object =
						new CompoundInfo();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"CompoundInfo".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CompoundInfo)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CSID").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setCSID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","InChI").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setInChI(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","InChIKey").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setInChIKey(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SMILES").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setSMILES(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class CompoundInfoE
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"CompoundInfo",
				"ns1");



		/**
		 * field for CompoundInfo
		 */


		protected CompoundInfo localCompoundInfo ;


		/**
		 * Auto generated getter method
		 * @return CompoundInfo
		 */
		public  CompoundInfo getCompoundInfo(){
			return localCompoundInfo;
		}



		/**
		 * Auto generated setter method
		 * @param param CompoundInfo
		 */
		public void setCompoundInfo(CompoundInfo param){

			this.localCompoundInfo=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			if (localCompoundInfo==null){
				throw new org.apache.axis2.databinding.ADBException("CompoundInfo cannot be null!");
			}
			localCompoundInfo.serialize(MY_QNAME,xmlWriter);


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it
			return localCompoundInfo.getPullParser(MY_QNAME);

		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static CompoundInfoE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				CompoundInfoE object =
						new CompoundInfoE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CompoundInfo").equals(reader.getName())){

								object.setCompoundInfo(CompoundInfo.Factory.parse(reader));

							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = SearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SearchOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SearchOptions",
							xmlWriter);
				}


			}

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();



			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SearchOptions object =
						null;

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}

							throw new org.apache.axis2.databinding.ADBException("The an abstract class can not be instantiated !!!");


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ExactSearchOptions
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ExactSearchOptions",
				"ns1");



		/**
		 * field for ExactSearchOptions
		 */


		protected java.lang.String localExactSearchOptions ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ExactSearchOptions(java.lang.String value, boolean isRegisterValue) {
			localExactSearchOptions = value;
			if (isRegisterValue){

				_table_.put(localExactSearchOptions, this);

			}

		}

		public static final java.lang.String _eExactMatch =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("eExactMatch");

		public static final java.lang.String _eAllTautomers =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("eAllTautomers");

		public static final java.lang.String _eSameSkeletonAndH =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("eSameSkeletonAndH");

		public static final java.lang.String _eSameSkeleton =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("eSameSkeleton");

		public static final java.lang.String _eAllIsomers =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("eAllIsomers");

		public static final ExactSearchOptions eExactMatch =
				new ExactSearchOptions(_eExactMatch,true);

		public static final ExactSearchOptions eAllTautomers =
				new ExactSearchOptions(_eAllTautomers,true);

		public static final ExactSearchOptions eSameSkeletonAndH =
				new ExactSearchOptions(_eSameSkeletonAndH,true);

		public static final ExactSearchOptions eSameSkeleton =
				new ExactSearchOptions(_eSameSkeleton,true);

		public static final ExactSearchOptions eAllIsomers =
				new ExactSearchOptions(_eAllIsomers,true);


		public java.lang.String getValue() { return localExactSearchOptions;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localExactSearchOptions.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":ExactSearchOptions",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "ExactSearchOptions",
							 xmlWriter);
				 }
			 }

			 if (localExactSearchOptions==null){

				 throw new org.apache.axis2.databinding.ADBException("ExactSearchOptions cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localExactSearchOptions);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExactSearchOptions)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static ExactSearchOptions fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 ExactSearchOptions enumeration = (ExactSearchOptions)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static ExactSearchOptions fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static ExactSearchOptions fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return ExactSearchOptions.Factory.fromString(content,namespaceUri);
				 } else {
					 return ExactSearchOptions.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ExactSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ExactSearchOptions object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = ExactSearchOptions.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = ExactSearchOptions.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class StructureSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"StructureSearchResponse",
				"ns1");



		/**
		 * field for StructureSearchResult
		 */


		protected java.lang.String localStructureSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localStructureSearchResultTracker = false ;

		public boolean isStructureSearchResultSpecified(){
			return localStructureSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getStructureSearchResult(){
			return localStructureSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param StructureSearchResult
		 */
		public void setStructureSearchResult(java.lang.String param){
			localStructureSearchResultTracker = param != null;

			this.localStructureSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":StructureSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"StructureSearchResponse",
							xmlWriter);
				}


			}
			if (localStructureSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "StructureSearchResult", xmlWriter);


				if (localStructureSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("StructureSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localStructureSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localStructureSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"StructureSearchResult"));

				if (localStructureSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStructureSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("StructureSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static StructureSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				StructureSearchResponse object =
						new StructureSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"StructureSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StructureSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","StructureSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setStructureSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class PredictedPropertiesSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = PredictedPropertiesSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for LogPMax
		 */


		protected double localLogPMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogPMax(){
			return localLogPMax;
		}



		/**
		 * Auto generated setter method
		 * @param param LogPMax
		 */
		public void setLogPMax(double param){

			this.localLogPMax=param;


		}


		/**
		 * field for LogPMin
		 */


		protected double localLogPMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogPMin(){
			return localLogPMin;
		}



		/**
		 * Auto generated setter method
		 * @param param LogPMin
		 */
		public void setLogPMin(double param){

			this.localLogPMin=param;


		}


		/**
		 * field for LogD55Max
		 */


		protected double localLogD55Max ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogD55Max(){
			return localLogD55Max;
		}



		/**
		 * Auto generated setter method
		 * @param param LogD55Max
		 */
		public void setLogD55Max(double param){

			this.localLogD55Max=param;


		}


		/**
		 * field for LogD55Min
		 */


		protected double localLogD55Min ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogD55Min(){
			return localLogD55Min;
		}



		/**
		 * Auto generated setter method
		 * @param param LogD55Min
		 */
		public void setLogD55Min(double param){

			this.localLogD55Min=param;


		}


		/**
		 * field for LogD74Max
		 */


		protected double localLogD74Max ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogD74Max(){
			return localLogD74Max;
		}



		/**
		 * Auto generated setter method
		 * @param param LogD74Max
		 */
		public void setLogD74Max(double param){

			this.localLogD74Max=param;


		}


		/**
		 * field for LogD74Min
		 */


		protected double localLogD74Min ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getLogD74Min(){
			return localLogD74Min;
		}



		/**
		 * Auto generated setter method
		 * @param param LogD74Min
		 */
		public void setLogD74Min(double param){

			this.localLogD74Min=param;


		}


		/**
		 * field for RuleOf5Max
		 */


		protected int localRuleOf5Max ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getRuleOf5Max(){
			return localRuleOf5Max;
		}



		/**
		 * Auto generated setter method
		 * @param param RuleOf5Max
		 */
		public void setRuleOf5Max(int param){

			this.localRuleOf5Max=param;


		}


		/**
		 * field for RuleOf5Min
		 */


		protected int localRuleOf5Min ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getRuleOf5Min(){
			return localRuleOf5Min;
		}



		/**
		 * Auto generated setter method
		 * @param param RuleOf5Min
		 */
		public void setRuleOf5Min(int param){

			this.localRuleOf5Min=param;


		}


		/**
		 * field for HAcceptorsMax
		 */


		protected int localHAcceptorsMax ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getHAcceptorsMax(){
			return localHAcceptorsMax;
		}



		/**
		 * Auto generated setter method
		 * @param param HAcceptorsMax
		 */
		public void setHAcceptorsMax(int param){

			this.localHAcceptorsMax=param;


		}


		/**
		 * field for HAcceptorsMin
		 */


		protected int localHAcceptorsMin ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getHAcceptorsMin(){
			return localHAcceptorsMin;
		}



		/**
		 * Auto generated setter method
		 * @param param HAcceptorsMin
		 */
		public void setHAcceptorsMin(int param){

			this.localHAcceptorsMin=param;


		}


		/**
		 * field for HDonorsMax
		 */


		protected int localHDonorsMax ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getHDonorsMax(){
			return localHDonorsMax;
		}



		/**
		 * Auto generated setter method
		 * @param param HDonorsMax
		 */
		public void setHDonorsMax(int param){

			this.localHDonorsMax=param;


		}


		/**
		 * field for HDonorsMin
		 */


		protected int localHDonorsMin ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getHDonorsMin(){
			return localHDonorsMin;
		}



		/**
		 * Auto generated setter method
		 * @param param HDonorsMin
		 */
		public void setHDonorsMin(int param){

			this.localHDonorsMin=param;


		}


		/**
		 * field for FreelyRotatableBondsMax
		 */


		protected int localFreelyRotatableBondsMax ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getFreelyRotatableBondsMax(){
			return localFreelyRotatableBondsMax;
		}



		/**
		 * Auto generated setter method
		 * @param param FreelyRotatableBondsMax
		 */
		public void setFreelyRotatableBondsMax(int param){

			this.localFreelyRotatableBondsMax=param;


		}


		/**
		 * field for FreelyRotatableBondsMin
		 */


		protected int localFreelyRotatableBondsMin ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getFreelyRotatableBondsMin(){
			return localFreelyRotatableBondsMin;
		}



		/**
		 * Auto generated setter method
		 * @param param FreelyRotatableBondsMin
		 */
		public void setFreelyRotatableBondsMin(int param){

			this.localFreelyRotatableBondsMin=param;


		}


		/**
		 * field for PolarSurfaceAreaMax
		 */


		protected double localPolarSurfaceAreaMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getPolarSurfaceAreaMax(){
			return localPolarSurfaceAreaMax;
		}



		/**
		 * Auto generated setter method
		 * @param param PolarSurfaceAreaMax
		 */
		public void setPolarSurfaceAreaMax(double param){

			this.localPolarSurfaceAreaMax=param;


		}


		/**
		 * field for PolarSurfaceAreaMin
		 */


		protected double localPolarSurfaceAreaMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getPolarSurfaceAreaMin(){
			return localPolarSurfaceAreaMin;
		}



		/**
		 * Auto generated setter method
		 * @param param PolarSurfaceAreaMin
		 */
		public void setPolarSurfaceAreaMin(double param){

			this.localPolarSurfaceAreaMin=param;


		}


		/**
		 * field for MolarVolumeMax
		 */


		protected double localMolarVolumeMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMolarVolumeMax(){
			return localMolarVolumeMax;
		}



		/**
		 * Auto generated setter method
		 * @param param MolarVolumeMax
		 */
		public void setMolarVolumeMax(double param){

			this.localMolarVolumeMax=param;


		}


		/**
		 * field for MolarVolumeMin
		 */


		protected double localMolarVolumeMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getMolarVolumeMin(){
			return localMolarVolumeMin;
		}



		/**
		 * Auto generated setter method
		 * @param param MolarVolumeMin
		 */
		public void setMolarVolumeMin(double param){

			this.localMolarVolumeMin=param;


		}


		/**
		 * field for RefractiveIndexMax
		 */


		protected double localRefractiveIndexMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getRefractiveIndexMax(){
			return localRefractiveIndexMax;
		}



		/**
		 * Auto generated setter method
		 * @param param RefractiveIndexMax
		 */
		public void setRefractiveIndexMax(double param){

			this.localRefractiveIndexMax=param;


		}


		/**
		 * field for RefractiveIndexMin
		 */


		protected double localRefractiveIndexMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getRefractiveIndexMin(){
			return localRefractiveIndexMin;
		}



		/**
		 * Auto generated setter method
		 * @param param RefractiveIndexMin
		 */
		public void setRefractiveIndexMin(double param){

			this.localRefractiveIndexMin=param;


		}


		/**
		 * field for BoilingPointMax
		 */


		protected double localBoilingPointMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getBoilingPointMax(){
			return localBoilingPointMax;
		}



		/**
		 * Auto generated setter method
		 * @param param BoilingPointMax
		 */
		public void setBoilingPointMax(double param){

			this.localBoilingPointMax=param;


		}


		/**
		 * field for BoilingPointMin
		 */


		protected double localBoilingPointMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getBoilingPointMin(){
			return localBoilingPointMin;
		}



		/**
		 * Auto generated setter method
		 * @param param BoilingPointMin
		 */
		public void setBoilingPointMin(double param){

			this.localBoilingPointMin=param;


		}


		/**
		 * field for FlashPointMax
		 */


		protected double localFlashPointMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getFlashPointMax(){
			return localFlashPointMax;
		}



		/**
		 * Auto generated setter method
		 * @param param FlashPointMax
		 */
		public void setFlashPointMax(double param){

			this.localFlashPointMax=param;


		}


		/**
		 * field for FlashPointMin
		 */


		protected double localFlashPointMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getFlashPointMin(){
			return localFlashPointMin;
		}



		/**
		 * Auto generated setter method
		 * @param param FlashPointMin
		 */
		public void setFlashPointMin(double param){

			this.localFlashPointMin=param;


		}


		/**
		 * field for DensityMax
		 */


		protected double localDensityMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getDensityMax(){
			return localDensityMax;
		}



		/**
		 * Auto generated setter method
		 * @param param DensityMax
		 */
		public void setDensityMax(double param){

			this.localDensityMax=param;


		}


		/**
		 * field for DensityMin
		 */


		protected double localDensityMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getDensityMin(){
			return localDensityMin;
		}



		/**
		 * Auto generated setter method
		 * @param param DensityMin
		 */
		public void setDensityMin(double param){

			this.localDensityMin=param;


		}


		/**
		 * field for SurfaceTensionMax
		 */


		protected double localSurfaceTensionMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getSurfaceTensionMax(){
			return localSurfaceTensionMax;
		}



		/**
		 * Auto generated setter method
		 * @param param SurfaceTensionMax
		 */
		public void setSurfaceTensionMax(double param){

			this.localSurfaceTensionMax=param;


		}


		/**
		 * field for SurfaceTensionMin
		 */


		protected double localSurfaceTensionMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getSurfaceTensionMin(){
			return localSurfaceTensionMin;
		}



		/**
		 * Auto generated setter method
		 * @param param SurfaceTensionMin
		 */
		public void setSurfaceTensionMin(double param){

			this.localSurfaceTensionMin=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":PredictedPropertiesSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"PredictedPropertiesSearchOptions",
						xmlWriter);
			}


			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogPMax", xmlWriter);

			if (java.lang.Double.isNaN(localLogPMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogPMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogPMin", xmlWriter);

			if (java.lang.Double.isNaN(localLogPMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogPMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogD55Max", xmlWriter);

			if (java.lang.Double.isNaN(localLogD55Max)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD55Max));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogD55Min", xmlWriter);

			if (java.lang.Double.isNaN(localLogD55Min)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD55Min));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogD74Max", xmlWriter);

			if (java.lang.Double.isNaN(localLogD74Max)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD74Max));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "LogD74Min", xmlWriter);

			if (java.lang.Double.isNaN(localLogD74Min)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD74Min));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "RuleOf5Max", xmlWriter);

			if (localRuleOf5Max==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleOf5Max));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "RuleOf5Min", xmlWriter);

			if (localRuleOf5Min==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleOf5Min));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HAcceptorsMax", xmlWriter);

			if (localHAcceptorsMax==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHAcceptorsMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HAcceptorsMin", xmlWriter);

			if (localHAcceptorsMin==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHAcceptorsMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HDonorsMax", xmlWriter);

			if (localHDonorsMax==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHDonorsMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "HDonorsMin", xmlWriter);

			if (localHDonorsMin==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHDonorsMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "FreelyRotatableBondsMax", xmlWriter);

			if (localFreelyRotatableBondsMax==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFreelyRotatableBondsMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "FreelyRotatableBondsMin", xmlWriter);

			if (localFreelyRotatableBondsMin==java.lang.Integer.MIN_VALUE) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFreelyRotatableBondsMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "PolarSurfaceAreaMax", xmlWriter);

			if (java.lang.Double.isNaN(localPolarSurfaceAreaMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolarSurfaceAreaMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "PolarSurfaceAreaMin", xmlWriter);

			if (java.lang.Double.isNaN(localPolarSurfaceAreaMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolarSurfaceAreaMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MolarVolumeMax", xmlWriter);

			if (java.lang.Double.isNaN(localMolarVolumeMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolarVolumeMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "MolarVolumeMin", xmlWriter);

			if (java.lang.Double.isNaN(localMolarVolumeMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolarVolumeMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "RefractiveIndexMax", xmlWriter);

			if (java.lang.Double.isNaN(localRefractiveIndexMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefractiveIndexMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "RefractiveIndexMin", xmlWriter);

			if (java.lang.Double.isNaN(localRefractiveIndexMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefractiveIndexMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "BoilingPointMax", xmlWriter);

			if (java.lang.Double.isNaN(localBoilingPointMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoilingPointMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "BoilingPointMin", xmlWriter);

			if (java.lang.Double.isNaN(localBoilingPointMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoilingPointMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "FlashPointMax", xmlWriter);

			if (java.lang.Double.isNaN(localFlashPointMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFlashPointMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "FlashPointMin", xmlWriter);

			if (java.lang.Double.isNaN(localFlashPointMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFlashPointMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "DensityMax", xmlWriter);

			if (java.lang.Double.isNaN(localDensityMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDensityMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "DensityMin", xmlWriter);

			if (java.lang.Double.isNaN(localDensityMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDensityMin));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "SurfaceTensionMax", xmlWriter);

			if (java.lang.Double.isNaN(localSurfaceTensionMax)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSurfaceTensionMax));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "SurfaceTensionMin", xmlWriter);

			if (java.lang.Double.isNaN(localSurfaceTensionMin)) {

				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSurfaceTensionMin));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","PredictedPropertiesSearchOptions"));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogPMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogPMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogPMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogPMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogD55Max"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD55Max));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogD55Min"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD55Min));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogD74Max"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD74Max));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"LogD74Min"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogD74Min));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"RuleOf5Max"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleOf5Max));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"RuleOf5Min"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRuleOf5Min));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HAcceptorsMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHAcceptorsMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HAcceptorsMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHAcceptorsMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HDonorsMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHDonorsMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"HDonorsMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHDonorsMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"FreelyRotatableBondsMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFreelyRotatableBondsMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"FreelyRotatableBondsMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFreelyRotatableBondsMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"PolarSurfaceAreaMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolarSurfaceAreaMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"PolarSurfaceAreaMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolarSurfaceAreaMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MolarVolumeMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolarVolumeMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MolarVolumeMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolarVolumeMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"RefractiveIndexMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefractiveIndexMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"RefractiveIndexMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefractiveIndexMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"BoilingPointMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoilingPointMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"BoilingPointMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoilingPointMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"FlashPointMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFlashPointMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"FlashPointMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFlashPointMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"DensityMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDensityMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"DensityMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDensityMin));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"SurfaceTensionMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSurfaceTensionMax));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"SurfaceTensionMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSurfaceTensionMin));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static PredictedPropertiesSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				PredictedPropertiesSearchOptions object =
						new PredictedPropertiesSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"PredictedPropertiesSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (PredictedPropertiesSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogPMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogPMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogPMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogPMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogPMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogPMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogD55Max").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogD55Max(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogD55Max(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogD55Min").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogD55Min(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogD55Min(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogD74Max").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogD74Max(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogD74Max(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LogD74Min").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setLogD74Min(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setLogD74Min(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","RuleOf5Max").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setRuleOf5Max(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setRuleOf5Max(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","RuleOf5Min").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setRuleOf5Min(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setRuleOf5Min(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HAcceptorsMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setHAcceptorsMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setHAcceptorsMax(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HAcceptorsMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setHAcceptorsMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setHAcceptorsMin(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HDonorsMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setHDonorsMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setHDonorsMax(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","HDonorsMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setHDonorsMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setHDonorsMin(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FreelyRotatableBondsMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setFreelyRotatableBondsMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setFreelyRotatableBondsMax(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FreelyRotatableBondsMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setFreelyRotatableBondsMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						} else {


							object.setFreelyRotatableBondsMin(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","PolarSurfaceAreaMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setPolarSurfaceAreaMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setPolarSurfaceAreaMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","PolarSurfaceAreaMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setPolarSurfaceAreaMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setPolarSurfaceAreaMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MolarVolumeMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMolarVolumeMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMolarVolumeMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MolarVolumeMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setMolarVolumeMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setMolarVolumeMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","RefractiveIndexMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setRefractiveIndexMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setRefractiveIndexMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","RefractiveIndexMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setRefractiveIndexMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setRefractiveIndexMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","BoilingPointMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setBoilingPointMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setBoilingPointMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","BoilingPointMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setBoilingPointMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setBoilingPointMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FlashPointMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setFlashPointMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setFlashPointMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FlashPointMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setFlashPointMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setFlashPointMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","DensityMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setDensityMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setDensityMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","DensityMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setDensityMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setDensityMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SurfaceTensionMax").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setSurfaceTensionMax(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setSurfaceTensionMax(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SurfaceTensionMin").equals(reader.getName())){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							object.setSurfaceTensionMin(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						} else {


							object.setSurfaceTensionMin(java.lang.Double.NaN);

							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class AsyncSimpleSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"AsyncSimpleSearchResponse",
				"ns1");



		/**
		 * field for AsyncSimpleSearchResult
		 */


		protected java.lang.String localAsyncSimpleSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localAsyncSimpleSearchResultTracker = false ;

		public boolean isAsyncSimpleSearchResultSpecified(){
			return localAsyncSimpleSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getAsyncSimpleSearchResult(){
			return localAsyncSimpleSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param AsyncSimpleSearchResult
		 */
		public void setAsyncSimpleSearchResult(java.lang.String param){
			localAsyncSimpleSearchResultTracker = param != null;

			this.localAsyncSimpleSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":AsyncSimpleSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"AsyncSimpleSearchResponse",
							xmlWriter);
				}


			}
			if (localAsyncSimpleSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "AsyncSimpleSearchResult", xmlWriter);


				if (localAsyncSimpleSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("AsyncSimpleSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localAsyncSimpleSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAsyncSimpleSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"AsyncSimpleSearchResult"));

				if (localAsyncSimpleSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAsyncSimpleSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("AsyncSimpleSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static AsyncSimpleSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				AsyncSimpleSearchResponse object =
						new AsyncSimpleSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"AsyncSimpleSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AsyncSimpleSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","AsyncSimpleSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setAsyncSimpleSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchStatusResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchStatusResponse",
				"ns1");



		/**
		 * field for GetAsyncSearchStatusResult
		 */


		protected ERequestStatus localGetAsyncSearchStatusResult ;


		/**
		 * Auto generated getter method
		 * @return ERequestStatus
		 */
		public  ERequestStatus getGetAsyncSearchStatusResult(){
			return localGetAsyncSearchStatusResult;
		}



		/**
		 * Auto generated setter method
		 * @param param GetAsyncSearchStatusResult
		 */
		public void setGetAsyncSearchStatusResult(ERequestStatus param){

			this.localGetAsyncSearchStatusResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetAsyncSearchStatusResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetAsyncSearchStatusResponse",
							xmlWriter);
				}


			}

			if (localGetAsyncSearchStatusResult==null){
				throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchStatusResult cannot be null!!");
			}
			localGetAsyncSearchStatusResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchStatusResult"),
					xmlWriter);

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"GetAsyncSearchStatusResult"));


			if (localGetAsyncSearchStatusResult==null){
				throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchStatusResult cannot be null!!");
			}
			elementList.add(localGetAsyncSearchStatusResult);


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetAsyncSearchStatusResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAsyncSearchStatusResponse object =
						new GetAsyncSearchStatusResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetAsyncSearchStatusResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAsyncSearchStatusResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchStatusResult").equals(reader.getName())){

						object.setGetAsyncSearchStatusResult(ERequestStatus.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class CSID2ExtRefsResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"CSID2ExtRefsResponse",
				"ns1");



		/**
		 * field for CSID2ExtRefsResult
		 */


		protected ArrayOfExtRef localCSID2ExtRefsResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCSID2ExtRefsResultTracker = false ;

		public boolean isCSID2ExtRefsResultSpecified(){
			return localCSID2ExtRefsResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfExtRef
		 */
		public  ArrayOfExtRef getCSID2ExtRefsResult(){
			return localCSID2ExtRefsResult;
		}



		/**
		 * Auto generated setter method
		 * @param param CSID2ExtRefsResult
		 */
		public void setCSID2ExtRefsResult(ArrayOfExtRef param){
			localCSID2ExtRefsResultTracker = param != null;

			this.localCSID2ExtRefsResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":CSID2ExtRefsResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"CSID2ExtRefsResponse",
							xmlWriter);
				}


			}
			if (localCSID2ExtRefsResultTracker){
				if (localCSID2ExtRefsResult==null){
					throw new org.apache.axis2.databinding.ADBException("CSID2ExtRefsResult cannot be null!!");
				}
				localCSID2ExtRefsResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","CSID2ExtRefsResult"),
						xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCSID2ExtRefsResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"CSID2ExtRefsResult"));


				if (localCSID2ExtRefsResult==null){
					throw new org.apache.axis2.databinding.ADBException("CSID2ExtRefsResult cannot be null!!");
				}
				elementList.add(localCSID2ExtRefsResult);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static CSID2ExtRefsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				CSID2ExtRefsResponse object =
						new CSID2ExtRefsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"CSID2ExtRefsResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CSID2ExtRefsResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CSID2ExtRefsResult").equals(reader.getName())){

						object.setCSID2ExtRefsResult(ArrayOfExtRef.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetCompoundThumbnailResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetCompoundThumbnailResponse",
				"ns1");



		/**
		 * field for GetCompoundThumbnailResult
		 */


		protected javax.activation.DataHandler localGetCompoundThumbnailResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetCompoundThumbnailResultTracker = false ;

		public boolean isGetCompoundThumbnailResultSpecified(){
			return localGetCompoundThumbnailResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return javax.activation.DataHandler
		 */
		public  javax.activation.DataHandler getGetCompoundThumbnailResult(){
			return localGetCompoundThumbnailResult;
		}



		/**
		 * Auto generated setter method
		 * @param param GetCompoundThumbnailResult
		 */
		public void setGetCompoundThumbnailResult(javax.activation.DataHandler param){
			localGetCompoundThumbnailResultTracker = param != null;

			this.localGetCompoundThumbnailResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetCompoundThumbnailResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetCompoundThumbnailResponse",
							xmlWriter);
				}


			}
			if (localGetCompoundThumbnailResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "GetCompoundThumbnailResult", xmlWriter);


				if (localGetCompoundThumbnailResult!=null)  {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localGetCompoundThumbnailResult, null, true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for GetCompoundThumbnailResult", ex);
					}
				} else {

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localGetCompoundThumbnailResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"GetCompoundThumbnailResult"));

				elementList.add(localGetCompoundThumbnailResult);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetCompoundThumbnailResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetCompoundThumbnailResponse object =
						new GetCompoundThumbnailResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetCompoundThumbnailResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCompoundThumbnailResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetCompoundThumbnailResult").equals(reader.getName())){

						object.setGetCompoundThumbnailResult(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchStatus
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchStatus",
				"ns1");



		/**
		 * field for Rid
		 */


		protected java.lang.String localRid ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localRidTracker = false ;

		public boolean isRidSpecified(){
			return localRidTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getRid(){
			return localRid;
		}



		/**
		 * Auto generated setter method
		 * @param param Rid
		 */
		public void setRid(java.lang.String param){
			localRidTracker = param != null;

			this.localRid=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetAsyncSearchStatus",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetAsyncSearchStatus",
							xmlWriter);
				}


			}
			if (localRidTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "rid", xmlWriter);


				if (localRid==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localRid);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localRidTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"rid"));

				if (localRid != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRid));
				} else {
					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetAsyncSearchStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAsyncSearchStatus object =
						new GetAsyncSearchStatus();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetAsyncSearchStatus".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAsyncSearchStatus)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","rid").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setRid(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ESimilarityType
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ESimilarityType",
				"ns1");



		/**
		 * field for ESimilarityType
		 */


		protected java.lang.String localESimilarityType ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ESimilarityType(java.lang.String value, boolean isRegisterValue) {
			localESimilarityType = value;
			if (isRegisterValue){

				_table_.put(localESimilarityType, this);

			}

		}

		public static final java.lang.String _Tanimoto =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Tanimoto");

		public static final java.lang.String _Tversky =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Tversky");

		public static final java.lang.String _Euclidian =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Euclidian");

		public static final ESimilarityType Tanimoto =
				new ESimilarityType(_Tanimoto,true);

		public static final ESimilarityType Tversky =
				new ESimilarityType(_Tversky,true);

		public static final ESimilarityType Euclidian =
				new ESimilarityType(_Euclidian,true);


		public java.lang.String getValue() { return localESimilarityType;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localESimilarityType.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":ESimilarityType",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "ESimilarityType",
							 xmlWriter);
				 }
			 }

			 if (localESimilarityType==null){

				 throw new org.apache.axis2.databinding.ADBException("ESimilarityType cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localESimilarityType);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localESimilarityType)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static ESimilarityType fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 ESimilarityType enumeration = (ESimilarityType)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static ESimilarityType fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static ESimilarityType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return ESimilarityType.Factory.fromString(content,namespaceUri);
				 } else {
					 return ESimilarityType.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ESimilarityType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ESimilarityType object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = ESimilarityType.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = ESimilarityType.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class LassoSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"LassoSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected LassoSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return LassoSearchOptions
		 */
		public  LassoSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(LassoSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":LassoSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"LassoSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static LassoSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				LassoSearch object =
						new LassoSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"LassoSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (LassoSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(LassoSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class EMatchType
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"EMatchType",
				"ns1");



		/**
		 * field for EMatchType
		 */


		protected java.lang.String localEMatchType ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected EMatchType(java.lang.String value, boolean isRegisterValue) {
			localEMatchType = value;
			if (isRegisterValue){

				_table_.put(localEMatchType, this);

			}

		}

		public static final java.lang.String _ExactMatch =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("ExactMatch");

		public static final java.lang.String _AllTautomers =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("AllTautomers");

		public static final java.lang.String _SameSkeletonIncludingH =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SameSkeletonIncludingH");

		public static final java.lang.String _SameSkeletonExcludingH =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SameSkeletonExcludingH");

		public static final java.lang.String _AllIsomers =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("AllIsomers");

		public static final EMatchType ExactMatch =
				new EMatchType(_ExactMatch,true);

		public static final EMatchType AllTautomers =
				new EMatchType(_AllTautomers,true);

		public static final EMatchType SameSkeletonIncludingH =
				new EMatchType(_SameSkeletonIncludingH,true);

		public static final EMatchType SameSkeletonExcludingH =
				new EMatchType(_SameSkeletonExcludingH,true);

		public static final EMatchType AllIsomers =
				new EMatchType(_AllIsomers,true);


		public java.lang.String getValue() { return localEMatchType;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localEMatchType.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":EMatchType",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "EMatchType",
							 xmlWriter);
				 }
			 }

			 if (localEMatchType==null){

				 throw new org.apache.axis2.databinding.ADBException("EMatchType cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localEMatchType);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEMatchType)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static EMatchType fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 EMatchType enumeration = (EMatchType)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static EMatchType fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static EMatchType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return EMatchType.Factory.fromString(content,namespaceUri);
				 } else {
					 return EMatchType.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static EMatchType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 EMatchType object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = EMatchType.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = EMatchType.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class Base64Binary
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"base64Binary",
				"ns1");



		/**
		 * field for Base64Binary
		 */


		protected javax.activation.DataHandler localBase64Binary ;


		/**
		 * Auto generated getter method
		 * @return javax.activation.DataHandler
		 */
		public  javax.activation.DataHandler getBase64Binary(){
			return localBase64Binary;
		}



		/**
		 * Auto generated setter method
		 * @param param Base64Binary
		 */
		public void setBase64Binary(javax.activation.DataHandler param){

			this.localBase64Binary=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			java.lang.String namespace = "http://www.chemspider.com/";
			java.lang.String _localName = "base64Binary";

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType){
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":base64Binary",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"base64Binary",
							xmlWriter);
				}
			}

			if (localBase64Binary==null){

				// write the nil attribute
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			}else{


				if (localBase64Binary!=null)
				{
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localBase64Binary, null, true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for base64Binary", ex);
					}
				}

			}

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it

			if (localBase64Binary==null){
				return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
			}else{
				return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
						new java.lang.Object[]{
						org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBase64Binary)
				},
				null);
			}


		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static Base64Binary parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Base64Binary object =
						new Base64Binary();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)){
						// Skip the element and report the null value.  It cannot have subelements.
						while (!reader.isEndElement())
							reader.next();

						return object;


					}



					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","base64Binary").equals(reader.getName())){

								nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
								if ("true".equals(nillableValue) || "1".equals(nillableValue)){
									object.setBase64Binary(null);
									reader.next();
								} else {

									object.setBase64Binary(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

								}

							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class MolAndDS2CSID
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"MolAndDS2CSID",
				"ns1");



		/**
		 * field for Mol
		 */


		protected java.lang.String localMol ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localMolTracker = false ;

		public boolean isMolSpecified(){
			return localMolTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getMol(){
			return localMol;
		}



		/**
		 * Auto generated setter method
		 * @param param Mol
		 */
		public void setMol(java.lang.String param){
			localMolTracker = param != null;

			this.localMol=param;


		}


		/**
		 * field for Options
		 */


		protected ExactSearchOptions localOptions ;


		/**
		 * Auto generated getter method
		 * @return ExactSearchOptions
		 */
		public  ExactSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(ExactSearchOptions param){

			this.localOptions=param;


		}


		/**
		 * field for Datasources
		 */


		protected ArrayOfString localDatasources ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localDatasourcesTracker = false ;

		public boolean isDatasourcesSpecified(){
			return localDatasourcesTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfString
		 */
		public  ArrayOfString getDatasources(){
			return localDatasources;
		}



		/**
		 * Auto generated setter method
		 * @param param Datasources
		 */
		public void setDatasources(ArrayOfString param){
			localDatasourcesTracker = param != null;

			this.localDatasources=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":MolAndDS2CSID",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"MolAndDS2CSID",
							xmlWriter);
				}


			}
			if (localMolTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "mol", xmlWriter);


				if (localMol==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("mol cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMol);

				}

				xmlWriter.writeEndElement();
			}
			if (localOptions==null){
				throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
			}
			localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
					xmlWriter);
			if (localDatasourcesTracker){
				if (localDatasources==null){
					throw new org.apache.axis2.databinding.ADBException("datasources cannot be null!!");
				}
				localDatasources.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","datasources"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMolTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"mol"));

				if (localMol != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMol));
				} else {
					throw new org.apache.axis2.databinding.ADBException("mol cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"options"));


			if (localOptions==null){
				throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
			}
			elementList.add(localOptions);
			if (localDatasourcesTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"datasources"));


				if (localDatasources==null){
					throw new org.apache.axis2.databinding.ADBException("datasources cannot be null!!");
				}
				elementList.add(localDatasources);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static MolAndDS2CSID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				MolAndDS2CSID object =
						new MolAndDS2CSID();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"MolAndDS2CSID".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (MolAndDS2CSID)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","mol").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMol(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(ExactSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","datasources").equals(reader.getName())){

						object.setDatasources(ArrayOfString.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class AsyncSimpleSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"AsyncSimpleSearch",
				"ns1");



		/**
		 * field for Query
		 */


		protected java.lang.String localQuery ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localQueryTracker = false ;

		public boolean isQuerySpecified(){
			return localQueryTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getQuery(){
			return localQuery;
		}



		/**
		 * Auto generated setter method
		 * @param param Query
		 */
		public void setQuery(java.lang.String param){
			localQueryTracker = param != null;

			this.localQuery=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":AsyncSimpleSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"AsyncSimpleSearch",
							xmlWriter);
				}


			}
			if (localQueryTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "query", xmlWriter);


				if (localQuery==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localQuery);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localQueryTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"query"));

				if (localQuery != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery));
				} else {
					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static AsyncSimpleSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				AsyncSimpleSearch object =
						new AsyncSimpleSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"AsyncSimpleSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AsyncSimpleSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","query").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setQuery(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class Mol2CSID
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"Mol2CSID",
				"ns1");



		/**
		 * field for Mol
		 */


		protected java.lang.String localMol ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localMolTracker = false ;

		public boolean isMolSpecified(){
			return localMolTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getMol(){
			return localMol;
		}



		/**
		 * Auto generated setter method
		 * @param param Mol
		 */
		public void setMol(java.lang.String param){
			localMolTracker = param != null;

			this.localMol=param;


		}


		/**
		 * field for Options
		 */


		protected ExactSearchOptions localOptions ;


		/**
		 * Auto generated getter method
		 * @return ExactSearchOptions
		 */
		public  ExactSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(ExactSearchOptions param){

			this.localOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":Mol2CSID",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"Mol2CSID",
							xmlWriter);
				}


			}
			if (localMolTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "mol", xmlWriter);


				if (localMol==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("mol cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMol);

				}

				xmlWriter.writeEndElement();
			}
			if (localOptions==null){
				throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
			}
			localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
					xmlWriter);
			if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMolTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"mol"));

				if (localMol != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMol));
				} else {
					throw new org.apache.axis2.databinding.ADBException("mol cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"options"));


			if (localOptions==null){
				throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
			}
			elementList.add(localOptions);
			if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static Mol2CSID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Mol2CSID object =
						new Mol2CSID();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"Mol2CSID".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Mol2CSID)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","mol").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMol(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(ExactSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SimilaritySearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimilaritySearchResponse",
				"ns1");



		/**
		 * field for SimilaritySearchResult
		 */


		protected java.lang.String localSimilaritySearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localSimilaritySearchResultTracker = false ;

		public boolean isSimilaritySearchResultSpecified(){
			return localSimilaritySearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getSimilaritySearchResult(){
			return localSimilaritySearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param SimilaritySearchResult
		 */
		public void setSimilaritySearchResult(java.lang.String param){
			localSimilaritySearchResultTracker = param != null;

			this.localSimilaritySearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SimilaritySearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SimilaritySearchResponse",
							xmlWriter);
				}


			}
			if (localSimilaritySearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "SimilaritySearchResult", xmlWriter);


				if (localSimilaritySearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("SimilaritySearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localSimilaritySearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localSimilaritySearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"SimilaritySearchResult"));

				if (localSimilaritySearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSimilaritySearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("SimilaritySearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SimilaritySearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SimilaritySearchResponse object =
						new SimilaritySearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SimilaritySearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SimilaritySearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SimilaritySearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setSimilaritySearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class LassoSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = LassoSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for ThresholdMin
		 */


		protected double localThresholdMin ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getThresholdMin(){
			return localThresholdMin;
		}



		/**
		 * Auto generated setter method
		 * @param param ThresholdMin
		 */
		public void setThresholdMin(double param){

			this.localThresholdMin=param;


		}


		/**
		 * field for FamilyMin
		 */


		protected java.lang.String localFamilyMin ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localFamilyMinTracker = false ;

		public boolean isFamilyMinSpecified(){
			return localFamilyMinTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getFamilyMin(){
			return localFamilyMin;
		}



		/**
		 * Auto generated setter method
		 * @param param FamilyMin
		 */
		public void setFamilyMin(java.lang.String param){
			localFamilyMinTracker = param != null;

			this.localFamilyMin=param;


		}


		/**
		 * field for ThresholdMax
		 */


		protected double localThresholdMax ;


		/**
		 * Auto generated getter method
		 * @return double
		 */
		public  double getThresholdMax(){
			return localThresholdMax;
		}



		/**
		 * Auto generated setter method
		 * @param param ThresholdMax
		 */
		public void setThresholdMax(double param){

			this.localThresholdMax=param;


		}


		/**
		 * field for FamilyMax
		 */


		protected ArrayOfString localFamilyMax ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localFamilyMaxTracker = false ;

		public boolean isFamilyMaxSpecified(){
			return localFamilyMaxTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfString
		 */
		public  ArrayOfString getFamilyMax(){
			return localFamilyMax;
		}



		/**
		 * Auto generated setter method
		 * @param param FamilyMax
		 */
		public void setFamilyMax(ArrayOfString param){
			localFamilyMaxTracker = param != null;

			this.localFamilyMax=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":LassoSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"LassoSearchOptions",
						xmlWriter);
			}


			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "ThresholdMin", xmlWriter);

			if (java.lang.Double.isNaN(localThresholdMin)) {

				throw new org.apache.axis2.databinding.ADBException("ThresholdMin cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThresholdMin));
			}

			xmlWriter.writeEndElement();
			if (localFamilyMinTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "FamilyMin", xmlWriter);


				if (localFamilyMin==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("FamilyMin cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localFamilyMin);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "ThresholdMax", xmlWriter);

			if (java.lang.Double.isNaN(localThresholdMax)) {

				throw new org.apache.axis2.databinding.ADBException("ThresholdMax cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThresholdMax));
			}

			xmlWriter.writeEndElement();
			if (localFamilyMaxTracker){
				if (localFamilyMax==null){
					throw new org.apache.axis2.databinding.ADBException("FamilyMax cannot be null!!");
				}
				localFamilyMax.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","FamilyMax"),
						xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","LassoSearchOptions"));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"ThresholdMin"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThresholdMin));
			if (localFamilyMinTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"FamilyMin"));

				if (localFamilyMin != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFamilyMin));
				} else {
					throw new org.apache.axis2.databinding.ADBException("FamilyMin cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"ThresholdMax"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThresholdMax));
			if (localFamilyMaxTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"FamilyMax"));


				if (localFamilyMax==null){
					throw new org.apache.axis2.databinding.ADBException("FamilyMax cannot be null!!");
				}
				elementList.add(localFamilyMax);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static LassoSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				LassoSearchOptions object =
						new LassoSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"LassoSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (LassoSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ThresholdMin").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setThresholdMin(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FamilyMin").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setFamilyMin(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ThresholdMax").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setThresholdMax(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","FamilyMax").equals(reader.getName())){

						object.setFamilyMax(ArrayOfString.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchResult
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchResult",
				"ns1");



		/**
		 * field for Rid
		 */


		protected java.lang.String localRid ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localRidTracker = false ;

		public boolean isRidSpecified(){
			return localRidTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getRid(){
			return localRid;
		}



		/**
		 * Auto generated setter method
		 * @param param Rid
		 */
		public void setRid(java.lang.String param){
			localRidTracker = param != null;

			this.localRid=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetAsyncSearchResult",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetAsyncSearchResult",
							xmlWriter);
				}


			}
			if (localRidTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "rid", xmlWriter);


				if (localRid==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localRid);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localRidTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"rid"));

				if (localRid != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRid));
				} else {
					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetAsyncSearchResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAsyncSearchResult object =
						new GetAsyncSearchResult();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetAsyncSearchResult".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAsyncSearchResult)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","rid").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setRid(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SubstructureSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SubstructureSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected SubstructureSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return SubstructureSearchOptions
		 */
		public  SubstructureSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(SubstructureSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SubstructureSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SubstructureSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SubstructureSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SubstructureSearch object =
						new SubstructureSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SubstructureSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SubstructureSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(SubstructureSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfString
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ArrayOfString
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for String
		 * This was an Array!
		 */


		protected java.lang.String[] localString ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localStringTracker = false ;

		public boolean isStringSpecified(){
			return localStringTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String[]
		 */
		public  java.lang.String[] getString(){
			return localString;
		}






		/**
		 * validate the array for String
		 */
		protected void validateString(java.lang.String[] param){

		}


		/**
		 * Auto generated setter method
		 * @param param String
		 */
		public void setString(java.lang.String[] param){

			validateString(param);

			localStringTracker = true;

			this.localString=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param java.lang.String
		 */
		public void addString(java.lang.String param){
			if (localString == null){
				localString = new java.lang.String[]{};
			}


			//update the setting tracker
			localStringTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localString);
			list.add(param);
			this.localString =
					(java.lang.String[])list.toArray(
							new java.lang.String[list.size()]);

		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ArrayOfString",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ArrayOfString",
							xmlWriter);
				}


			}
			if (localStringTracker){
				if (localString!=null) {
					namespace = "http://www.chemspider.com/";
					for (int i = 0;i < localString.length;i++){

						if (localString[i] != null){

							writeStartElement(null, namespace, "string", xmlWriter);


							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://www.chemspider.com/";
							writeStartElement(null, namespace, "string", xmlWriter);
							writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://www.chemspider.com/", "string", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localStringTracker){
				if (localString!=null){
					for (int i = 0;i < localString.length;i++){

						if (localString[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
									"string"));
							elementList.add(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
									"string"));
							elementList.add(null);

						}


					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
							"string"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ArrayOfString parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ArrayOfString object =
						new ArrayOfString();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ArrayOfString".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ArrayOfString)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","string").equals(reader.getName())){



						// Process the array and step past its final element's end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)){
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1){
							// Ensure we are at the EndElement
							while (!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()){
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://www.chemspider.com/","string").equals(reader.getName())){

									nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)){
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setString((java.lang.String[])
								list1.toArray(new java.lang.String[list1.size()]));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class String
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"string",
				"ns1");



		/**
		 * field for String
		 */


		protected java.lang.String localString ;


		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getString(){
			return localString;
		}



		/**
		 * Auto generated setter method
		 * @param param String
		 */
		public void setString(java.lang.String param){

			this.localString=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			java.lang.String namespace = "http://www.chemspider.com/";
			java.lang.String _localName = "string";

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType){
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":string",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"string",
							xmlWriter);
				}
			}

			if (localString==null){

				// write the nil attribute
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

			}else{

				xmlWriter.writeCharacters(localString);

			}

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it

			if (localString==null){
				return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
			}else{
				return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
						new java.lang.Object[]{
						org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString)
				},
				null);
			}


		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static String parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				String object =
						new String();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)){
						// Skip the element and report the null value.  It cannot have subelements.
						while (!reader.isEndElement())
							reader.next();

						return object;


					}



					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","string").equals(reader.getName())){

								nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
								if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

									java.lang.String content = reader.getElementText();

									object.setString(
											org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

								} else {


									reader.getElementText(); // throw away text nodes if any.
								}

							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetDataSliceCompoundsResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetDataSliceCompoundsResponse",
				"ns1");



		/**
		 * field for GetDataSliceCompoundsResult
		 */


		protected ArrayOfInt localGetDataSliceCompoundsResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetDataSliceCompoundsResultTracker = false ;

		public boolean isGetDataSliceCompoundsResultSpecified(){
			return localGetDataSliceCompoundsResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getGetDataSliceCompoundsResult(){
			 return localGetDataSliceCompoundsResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param GetDataSliceCompoundsResult
		  */
		 public void setGetDataSliceCompoundsResult(ArrayOfInt param){
			 localGetDataSliceCompoundsResultTracker = param != null;

			 this.localGetDataSliceCompoundsResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":GetDataSliceCompoundsResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "GetDataSliceCompoundsResponse",
							 xmlWriter);
				 }


			 }
			 if (localGetDataSliceCompoundsResultTracker){
				 if (localGetDataSliceCompoundsResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetDataSliceCompoundsResult cannot be null!!");
				 }
				 localGetDataSliceCompoundsResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetDataSliceCompoundsResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localGetDataSliceCompoundsResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "GetDataSliceCompoundsResult"));


				 if (localGetDataSliceCompoundsResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetDataSliceCompoundsResult cannot be null!!");
				 }
				 elementList.add(localGetDataSliceCompoundsResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static GetDataSliceCompoundsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 GetDataSliceCompoundsResponse object =
						 new GetDataSliceCompoundsResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"GetDataSliceCompoundsResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (GetDataSliceCompoundsResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetDataSliceCompoundsResult").equals(reader.getName())){

						 object.setGetDataSliceCompoundsResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class SimpleSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimpleSearchResponse",
				"ns1");



		/**
		 * field for SimpleSearchResult
		 */


		protected ArrayOfInt localSimpleSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localSimpleSearchResultTracker = false ;

		public boolean isSimpleSearchResultSpecified(){
			return localSimpleSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getSimpleSearchResult(){
			 return localSimpleSearchResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param SimpleSearchResult
		  */
		 public void setSimpleSearchResult(ArrayOfInt param){
			 localSimpleSearchResultTracker = param != null;

			 this.localSimpleSearchResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":SimpleSearchResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "SimpleSearchResponse",
							 xmlWriter);
				 }


			 }
			 if (localSimpleSearchResultTracker){
				 if (localSimpleSearchResult==null){
					 throw new org.apache.axis2.databinding.ADBException("SimpleSearchResult cannot be null!!");
				 }
				 localSimpleSearchResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","SimpleSearchResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localSimpleSearchResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "SimpleSearchResult"));


				 if (localSimpleSearchResult==null){
					 throw new org.apache.axis2.databinding.ADBException("SimpleSearchResult cannot be null!!");
				 }
				 elementList.add(localSimpleSearchResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static SimpleSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 SimpleSearchResponse object =
						 new SimpleSearchResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"SimpleSearchResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (SimpleSearchResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SimpleSearchResult").equals(reader.getName())){

						 object.setSimpleSearchResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class EComplexity
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"EComplexity",
				"ns1");



		/**
		 * field for EComplexity
		 */


		protected java.lang.String localEComplexity ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected EComplexity(java.lang.String value, boolean isRegisterValue) {
			localEComplexity = value;
			if (isRegisterValue){

				_table_.put(localEComplexity, this);

			}

		}

		public static final java.lang.String _Any =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Any");

		public static final java.lang.String _Single =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Single");

		public static final java.lang.String _Multi =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Multi");

		public static final EComplexity Any =
				new EComplexity(_Any,true);

		public static final EComplexity Single =
				new EComplexity(_Single,true);

		public static final EComplexity Multi =
				new EComplexity(_Multi,true);


		public java.lang.String getValue() { return localEComplexity;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localEComplexity.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":EComplexity",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "EComplexity",
							 xmlWriter);
				 }
			 }

			 if (localEComplexity==null){

				 throw new org.apache.axis2.databinding.ADBException("EComplexity cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localEComplexity);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEComplexity)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static EComplexity fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 EComplexity enumeration = (EComplexity)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static EComplexity fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static EComplexity fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return EComplexity.Factory.fromString(content,namespaceUri);
				 } else {
					 return EComplexity.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static EComplexity parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 EComplexity object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = EComplexity.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = EComplexity.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class StructureSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = StructureSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for Molecule
		 */


		protected java.lang.String localMolecule ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localMoleculeTracker = false ;

		public boolean isMoleculeSpecified(){
			return localMoleculeTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getMolecule(){
			return localMolecule;
		}



		/**
		 * Auto generated setter method
		 * @param param Molecule
		 */
		public void setMolecule(java.lang.String param){
			localMoleculeTracker = param != null;

			this.localMolecule=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":StructureSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"StructureSearchOptions",
						xmlWriter);
			}

			if (localMoleculeTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "Molecule", xmlWriter);


				if (localMolecule==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMolecule);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","StructureSearchOptions"));
			if (localMoleculeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"Molecule"));

				if (localMolecule != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolecule));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static StructureSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				StructureSearchOptions object =
						new StructureSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"StructureSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StructureSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Molecule").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMolecule(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SimpleSearch2IdListResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimpleSearch2IdListResponse",
				"ns1");



		/**
		 * field for SimpleSearch2IdListResult
		 */


		protected ArrayOfInt localSimpleSearch2IdListResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localSimpleSearch2IdListResultTracker = false ;

		public boolean isSimpleSearch2IdListResultSpecified(){
			return localSimpleSearch2IdListResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getSimpleSearch2IdListResult(){
			 return localSimpleSearch2IdListResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param SimpleSearch2IdListResult
		  */
		 public void setSimpleSearch2IdListResult(ArrayOfInt param){
			 localSimpleSearch2IdListResultTracker = param != null;

			 this.localSimpleSearch2IdListResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":SimpleSearch2IdListResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "SimpleSearch2IdListResponse",
							 xmlWriter);
				 }


			 }
			 if (localSimpleSearch2IdListResultTracker){
				 if (localSimpleSearch2IdListResult==null){
					 throw new org.apache.axis2.databinding.ADBException("SimpleSearch2IdListResult cannot be null!!");
				 }
				 localSimpleSearch2IdListResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","SimpleSearch2IdListResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localSimpleSearch2IdListResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "SimpleSearch2IdListResult"));


				 if (localSimpleSearch2IdListResult==null){
					 throw new org.apache.axis2.databinding.ADBException("SimpleSearch2IdListResult cannot be null!!");
				 }
				 elementList.add(localSimpleSearch2IdListResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static SimpleSearch2IdListResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 SimpleSearch2IdListResponse object =
						 new SimpleSearch2IdListResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"SimpleSearch2IdListResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (SimpleSearch2IdListResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SimpleSearch2IdListResult").equals(reader.getName())){

						 object.setSimpleSearch2IdListResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class SimilaritySearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimilaritySearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected SimilaritySearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return SimilaritySearchOptions
		 */
		public  SimilaritySearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(SimilaritySearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SimilaritySearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SimilaritySearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SimilaritySearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SimilaritySearch object =
						new SimilaritySearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SimilaritySearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SimilaritySearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(SimilaritySearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetCompoundThumbnail
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetCompoundThumbnail",
				"ns1");



		/**
		 * field for Id
		 */


		protected java.lang.String localId ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localIdTracker = false ;

		public boolean isIdSpecified(){
			return localIdTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getId(){
			return localId;
		}



		/**
		 * Auto generated setter method
		 * @param param Id
		 */
		public void setId(java.lang.String param){
			localIdTracker = param != null;

			this.localId=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetCompoundThumbnail",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetCompoundThumbnail",
							xmlWriter);
				}


			}
			if (localIdTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "id", xmlWriter);


				if (localId==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localId);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localIdTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"id"));

				if (localId != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
				} else {
					throw new org.apache.axis2.databinding.ADBException("id cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetCompoundThumbnail parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetCompoundThumbnail object =
						new GetCompoundThumbnail();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetCompoundThumbnail".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCompoundThumbnail)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","id").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setId(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetCompoundInfo
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetCompoundInfo",
				"ns1");



		/**
		 * field for CSID
		 */


		protected int localCSID ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getCSID(){
			return localCSID;
		}



		/**
		 * Auto generated setter method
		 * @param param CSID
		 */
		public void setCSID(int param){

			this.localCSID=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetCompoundInfo",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetCompoundInfo",
							xmlWriter);
				}


			}

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "CSID", xmlWriter);

			if (localCSID==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("CSID cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			}

			xmlWriter.writeEndElement();
			if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"CSID"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetCompoundInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetCompoundInfo object =
						new GetCompoundInfo();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetCompoundInfo".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCompoundInfo)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CSID").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setCSID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ERequestStatus
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ERequestStatus",
				"ns1");



		/**
		 * field for ERequestStatus
		 */


		protected java.lang.String localERequestStatus ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ERequestStatus(java.lang.String value, boolean isRegisterValue) {
			localERequestStatus = value;
			if (isRegisterValue){

				_table_.put(localERequestStatus, this);

			}

		}

		public static final java.lang.String _Unknown =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Unknown");

		public static final java.lang.String _Created =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Created");

		public static final java.lang.String _Scheduled =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Scheduled");

		public static final java.lang.String _Processing =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Processing");

		public static final java.lang.String _Suspended =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Suspended");

		public static final java.lang.String _PartialResultReady =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("PartialResultReady");

		public static final java.lang.String _ResultReady =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("ResultReady");

		public static final java.lang.String _Failed =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Failed");

		public static final java.lang.String _TooManyRecords =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("TooManyRecords");

		public static final ERequestStatus Unknown =
				new ERequestStatus(_Unknown,true);

		public static final ERequestStatus Created =
				new ERequestStatus(_Created,true);

		public static final ERequestStatus Scheduled =
				new ERequestStatus(_Scheduled,true);

		public static final ERequestStatus Processing =
				new ERequestStatus(_Processing,true);

		public static final ERequestStatus Suspended =
				new ERequestStatus(_Suspended,true);

		public static final ERequestStatus PartialResultReady =
				new ERequestStatus(_PartialResultReady,true);

		public static final ERequestStatus ResultReady =
				new ERequestStatus(_ResultReady,true);

		public static final ERequestStatus Failed =
				new ERequestStatus(_Failed,true);

		public static final ERequestStatus TooManyRecords =
				new ERequestStatus(_TooManyRecords,true);


		public java.lang.String getValue() { return localERequestStatus;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public java.lang.String toString() {

			return localERequestStatus.toString();


		}





		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 java.lang.String namespace = parentQName.getNamespaceURI();
			 java.lang.String _localName = parentQName.getLocalPart();

			 writeStartElement(null, namespace, _localName, xmlWriter);

			 // add the type details if this is used in a simple type
			 if (serializeType){
				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":ERequestStatus",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "ERequestStatus",
							 xmlWriter);
				 }
			 }

			 if (localERequestStatus==null){

				 throw new org.apache.axis2.databinding.ADBException("ERequestStatus cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localERequestStatus);

			 }

			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localERequestStatus)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static ERequestStatus fromValue(java.lang.String value)
					 throws java.lang.IllegalArgumentException {
				 ERequestStatus enumeration = (ERequestStatus)

						 _table_.get(value);


				 if ((enumeration == null) && !((value == null) || (value.equals("")))) {
					 throw new java.lang.IllegalArgumentException();
				 }
				 return enumeration;
			 }
			 public static ERequestStatus fromString(java.lang.String value,java.lang.String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static ERequestStatus fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 java.lang.String content) {
				 if (content.indexOf(":") > -1){
					 java.lang.String prefix = content.substring(0,content.indexOf(":"));
					 java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return ERequestStatus.Factory.fromString(content,namespaceUri);
				 } else {
					 return ERequestStatus.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ERequestStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ERequestStatus object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()){

							 java.lang.String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = ERequestStatus.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = ERequestStatus.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class ElementsSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ElementsSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected ElementsSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ElementsSearchOptions
		 */
		public  ElementsSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(ElementsSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ElementsSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ElementsSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ElementsSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ElementsSearch object =
						new ElementsSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ElementsSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ElementsSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(ElementsSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SimpleSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"SimpleSearch",
				"ns1");



		/**
		 * field for Query
		 */


		protected java.lang.String localQuery ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localQueryTracker = false ;

		public boolean isQuerySpecified(){
			return localQueryTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getQuery(){
			return localQuery;
		}



		/**
		 * Auto generated setter method
		 * @param param Query
		 */
		public void setQuery(java.lang.String param){
			localQueryTracker = param != null;

			this.localQuery=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":SimpleSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"SimpleSearch",
							xmlWriter);
				}


			}
			if (localQueryTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "query", xmlWriter);


				if (localQuery==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localQuery);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localQueryTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"query"));

				if (localQuery != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery));
				} else {
					throw new org.apache.axis2.databinding.ADBException("query cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SimpleSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SimpleSearch object =
						new SimpleSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SimpleSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SimpleSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","query").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setQuery(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchResultPartResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchResultPartResponse",
				"ns1");



		/**
		 * field for GetAsyncSearchResultPartResult
		 */


		protected ArrayOfInt localGetAsyncSearchResultPartResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localGetAsyncSearchResultPartResultTracker = false ;

		public boolean isGetAsyncSearchResultPartResultSpecified(){
			return localGetAsyncSearchResultPartResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getGetAsyncSearchResultPartResult(){
			 return localGetAsyncSearchResultPartResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param GetAsyncSearchResultPartResult
		  */
		 public void setGetAsyncSearchResultPartResult(ArrayOfInt param){
			 localGetAsyncSearchResultPartResultTracker = param != null;

			 this.localGetAsyncSearchResultPartResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":GetAsyncSearchResultPartResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "GetAsyncSearchResultPartResponse",
							 xmlWriter);
				 }


			 }
			 if (localGetAsyncSearchResultPartResultTracker){
				 if (localGetAsyncSearchResultPartResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchResultPartResult cannot be null!!");
				 }
				 localGetAsyncSearchResultPartResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchResultPartResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localGetAsyncSearchResultPartResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "GetAsyncSearchResultPartResult"));


				 if (localGetAsyncSearchResultPartResult==null){
					 throw new org.apache.axis2.databinding.ADBException("GetAsyncSearchResultPartResult cannot be null!!");
				 }
				 elementList.add(localGetAsyncSearchResultPartResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static GetAsyncSearchResultPartResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 GetAsyncSearchResultPartResponse object =
						 new GetAsyncSearchResultPartResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"GetAsyncSearchResultPartResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (GetAsyncSearchResultPartResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","GetAsyncSearchResultPartResult").equals(reader.getName())){

						 object.setGetAsyncSearchResultPartResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class LassoSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"LassoSearchResponse",
				"ns1");



		/**
		 * field for LassoSearchResult
		 */


		protected java.lang.String localLassoSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localLassoSearchResultTracker = false ;

		public boolean isLassoSearchResultSpecified(){
			return localLassoSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getLassoSearchResult(){
			return localLassoSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param LassoSearchResult
		 */
		public void setLassoSearchResult(java.lang.String param){
			localLassoSearchResultTracker = param != null;

			this.localLassoSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":LassoSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"LassoSearchResponse",
							xmlWriter);
				}


			}
			if (localLassoSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "LassoSearchResult", xmlWriter);


				if (localLassoSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("LassoSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localLassoSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localLassoSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"LassoSearchResult"));

				if (localLassoSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLassoSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("LassoSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static LassoSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				LassoSearchResponse object =
						new LassoSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"LassoSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (LassoSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","LassoSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setLassoSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class SimilaritySearchOptions extends StructureSearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = SimilaritySearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for SimilarityType
		 */


		protected ESimilarityType localSimilarityType ;


		/**
		 * Auto generated getter method
		 * @return ESimilarityType
		 */
		public  ESimilarityType getSimilarityType(){
			return localSimilarityType;
		}



		/**
		 * Auto generated setter method
		 * @param param SimilarityType
		 */
		public void setSimilarityType(ESimilarityType param){

			this.localSimilarityType=param;


		}


		/**
		 * field for Threshold
		 */


		protected float localThreshold ;


		/**
		 * Auto generated getter method
		 * @return float
		 */
		public  float getThreshold(){
			return localThreshold;
		}



		/**
		 * Auto generated setter method
		 * @param param Threshold
		 */
		public void setThreshold(float param){

			this.localThreshold=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":SimilaritySearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"SimilaritySearchOptions",
						xmlWriter);
			}

			if (localMoleculeTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "Molecule", xmlWriter);


				if (localMolecule==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMolecule);

				}

				xmlWriter.writeEndElement();
			}
			if (localSimilarityType==null){
				throw new org.apache.axis2.databinding.ADBException("SimilarityType cannot be null!!");
			}
			localSimilarityType.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","SimilarityType"),
					xmlWriter);

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "Threshold", xmlWriter);

			if (java.lang.Float.isNaN(localThreshold)) {

				throw new org.apache.axis2.databinding.ADBException("Threshold cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThreshold));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","SimilaritySearchOptions"));
			if (localMoleculeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"Molecule"));

				if (localMolecule != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolecule));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"SimilarityType"));


			if (localSimilarityType==null){
				throw new org.apache.axis2.databinding.ADBException("SimilarityType cannot be null!!");
			}
			elementList.add(localSimilarityType);

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"Threshold"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThreshold));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static SimilaritySearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SimilaritySearchOptions object =
						new SimilaritySearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"SimilaritySearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SimilaritySearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Molecule").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMolecule(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","SimilarityType").equals(reader.getName())){

						object.setSimilarityType(ESimilarityType.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Threshold").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setThreshold(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ElementsSearchOptions extends SearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ElementsSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for IncludeAll
		 */


		protected boolean localIncludeAll ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getIncludeAll(){
			return localIncludeAll;
		}



		/**
		 * Auto generated setter method
		 * @param param IncludeAll
		 */
		public void setIncludeAll(boolean param){

			this.localIncludeAll=param;


		}


		/**
		 * field for IncludeElements
		 */


		protected ArrayOfString localIncludeElements ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localIncludeElementsTracker = false ;

		public boolean isIncludeElementsSpecified(){
			return localIncludeElementsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfString
		 */
		public  ArrayOfString getIncludeElements(){
			return localIncludeElements;
		}



		/**
		 * Auto generated setter method
		 * @param param IncludeElements
		 */
		public void setIncludeElements(ArrayOfString param){
			localIncludeElementsTracker = param != null;

			this.localIncludeElements=param;


		}


		/**
		 * field for ExcludeElements
		 */


		protected ArrayOfString localExcludeElements ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localExcludeElementsTracker = false ;

		public boolean isExcludeElementsSpecified(){
			return localExcludeElementsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfString
		 */
		public  ArrayOfString getExcludeElements(){
			return localExcludeElements;
		}



		/**
		 * Auto generated setter method
		 * @param param ExcludeElements
		 */
		public void setExcludeElements(ArrayOfString param){
			localExcludeElementsTracker = param != null;

			this.localExcludeElements=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":ElementsSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"ElementsSearchOptions",
						xmlWriter);
			}


			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "IncludeAll", xmlWriter);

			if (false) {

				throw new org.apache.axis2.databinding.ADBException("IncludeAll cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeAll));
			}

			xmlWriter.writeEndElement();
			if (localIncludeElementsTracker){
				if (localIncludeElements==null){
					throw new org.apache.axis2.databinding.ADBException("IncludeElements cannot be null!!");
				}
				localIncludeElements.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","IncludeElements"),
						xmlWriter);
			} if (localExcludeElementsTracker){
				if (localExcludeElements==null){
					throw new org.apache.axis2.databinding.ADBException("ExcludeElements cannot be null!!");
				}
				localExcludeElements.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","ExcludeElements"),
						xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","ElementsSearchOptions"));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"IncludeAll"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeAll));
			if (localIncludeElementsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"IncludeElements"));


				if (localIncludeElements==null){
					throw new org.apache.axis2.databinding.ADBException("IncludeElements cannot be null!!");
				}
				elementList.add(localIncludeElements);
			} if (localExcludeElementsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"ExcludeElements"));


				if (localExcludeElements==null){
					throw new org.apache.axis2.databinding.ADBException("ExcludeElements cannot be null!!");
				}
				elementList.add(localExcludeElements);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ElementsSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ElementsSearchOptions object =
						new ElementsSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ElementsSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ElementsSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","IncludeAll").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setIncludeAll(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","IncludeElements").equals(reader.getName())){

						object.setIncludeElements(ArrayOfString.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ExcludeElements").equals(reader.getName())){

						object.setExcludeElements(ArrayOfString.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class Mol2CSIDResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"Mol2CSIDResponse",
				"ns1");



		/**
		 * field for Mol2CSIDResult
		 */


		protected ArrayOfInt localMol2CSIDResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localMol2CSIDResultTracker = false ;

		public boolean isMol2CSIDResultSpecified(){
			return localMol2CSIDResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getMol2CSIDResult(){
			 return localMol2CSIDResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param Mol2CSIDResult
		  */
		 public void setMol2CSIDResult(ArrayOfInt param){
			 localMol2CSIDResultTracker = param != null;

			 this.localMol2CSIDResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":Mol2CSIDResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "Mol2CSIDResponse",
							 xmlWriter);
				 }


			 }
			 if (localMol2CSIDResultTracker){
				 if (localMol2CSIDResult==null){
					 throw new org.apache.axis2.databinding.ADBException("Mol2CSIDResult cannot be null!!");
				 }
				 localMol2CSIDResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","Mol2CSIDResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localMol2CSIDResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "Mol2CSIDResult"));


				 if (localMol2CSIDResult==null){
					 throw new org.apache.axis2.databinding.ADBException("Mol2CSIDResult cannot be null!!");
				 }
				 elementList.add(localMol2CSIDResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static Mol2CSIDResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 Mol2CSIDResponse object =
						 new Mol2CSIDResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"Mol2CSIDResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (Mol2CSIDResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Mol2CSIDResult").equals(reader.getName())){

						 object.setMol2CSIDResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class ExactStructureSearchOptions extends StructureSearchOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ExactStructureSearchOptions
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for MatchType
		 */


		protected EMatchType localMatchType ;


		/**
		 * Auto generated getter method
		 * @return EMatchType
		 */
		public  EMatchType getMatchType(){
			return localMatchType;
		}



		/**
		 * Auto generated setter method
		 * @param param MatchType
		 */
		public void setMatchType(EMatchType param){

			this.localMatchType=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":ExactStructureSearchOptions",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"ExactStructureSearchOptions",
						xmlWriter);
			}

			if (localMoleculeTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "Molecule", xmlWriter);


				if (localMolecule==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localMolecule);

				}

				xmlWriter.writeEndElement();
			}
			if (localMatchType==null){
				throw new org.apache.axis2.databinding.ADBException("MatchType cannot be null!!");
			}
			localMatchType.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","MatchType"),
					xmlWriter);

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
			attribList.add(new javax.xml.namespace.QName("http://www.chemspider.com/","ExactStructureSearchOptions"));
			if (localMoleculeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"Molecule"));

				if (localMolecule != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMolecule));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Molecule cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"MatchType"));


			if (localMatchType==null){
				throw new org.apache.axis2.databinding.ADBException("MatchType cannot be null!!");
			}
			elementList.add(localMatchType);


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ExactStructureSearchOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ExactStructureSearchOptions object =
						new ExactStructureSearchOptions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ExactStructureSearchOptions".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExactStructureSearchOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","Molecule").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setMolecule(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MatchType").equals(reader.getName())){

						object.setMatchType(EMatchType.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class MolAndDS2CSIDResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"MolAndDS2CSIDResponse",
				"ns1");



		/**
		 * field for MolAndDS2CSIDResult
		 */


		protected ArrayOfInt localMolAndDS2CSIDResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localMolAndDS2CSIDResultTracker = false ;

		public boolean isMolAndDS2CSIDResultSpecified(){
			return localMolAndDS2CSIDResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfInt
		 */
		 public  ArrayOfInt getMolAndDS2CSIDResult(){
			 return localMolAndDS2CSIDResult;
		 }



		 /**
		  * Auto generated setter method
		  * @param param MolAndDS2CSIDResult
		  */
		 public void setMolAndDS2CSIDResult(ArrayOfInt param){
			 localMolAndDS2CSIDResultTracker = param != null;

			 this.localMolAndDS2CSIDResult=param;


		 }




		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			 return factory.createOMElement(dataSource,MY_QNAME);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 javax.xml.stream.XMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			 java.lang.String prefix = null;
			 java.lang.String namespace = null;


			 prefix = parentQName.getPrefix();
			 namespace = parentQName.getNamespaceURI();
			 writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			 if (serializeType){


				 java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":MolAndDS2CSIDResponse",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "MolAndDS2CSIDResponse",
							 xmlWriter);
				 }


			 }
			 if (localMolAndDS2CSIDResultTracker){
				 if (localMolAndDS2CSIDResult==null){
					 throw new org.apache.axis2.databinding.ADBException("MolAndDS2CSIDResult cannot be null!!");
				 }
				 localMolAndDS2CSIDResult.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","MolAndDS2CSIDResult"),
						 xmlWriter);
			 }
			 xmlWriter.writeEndElement();


		 }

		 private static java.lang.String generatePrefix(java.lang.String namespace) {
			 if(namespace.equals("http://www.chemspider.com/")){
				 return "ns1";
			 }
			 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		 }

		 /**
		  * Utility method to write an element start tag.
		  */
		 private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			 if (writerPrefix != null) {
				 xmlWriter.writeStartElement(namespace, localPart);
			 } else {
				 if (namespace.length() == 0) {
					 prefix = "";
				 } else if (prefix == null) {
					 prefix = generatePrefix(namespace);
				 }

				 xmlWriter.writeStartElement(prefix, localPart, namespace);
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 xmlWriter.writeAttribute(namespace,attName,attValue);
		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				 java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName,attValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 java.lang.String attributeNamespace = qname.getNamespaceURI();
			 java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 java.lang.String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 java.lang.String namespaceURI = qname.getNamespaceURI();
			 if (namespaceURI != null) {
				 java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0){
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				 java.lang.String namespaceURI = null;
				 java.lang.String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0){
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			 java.lang.String prefix = xmlWriter.getPrefix(namespace);
			 if (prefix == null) {
				 prefix = generatePrefix(namespace);
				 javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				 while (true) {
					 java.lang.String uri = nsContext.getNamespaceURI(prefix);
					 if (uri == null || uri.length() == 0) {
						 break;
					 }
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }
			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{



			 java.util.ArrayList elementList = new java.util.ArrayList();
			 java.util.ArrayList attribList = new java.util.ArrayList();

			 if (localMolAndDS2CSIDResultTracker){
				 elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						 "MolAndDS2CSIDResult"));


				 if (localMolAndDS2CSIDResult==null){
					 throw new org.apache.axis2.databinding.ADBException("MolAndDS2CSIDResult cannot be null!!");
				 }
				 elementList.add(localMolAndDS2CSIDResult);
			 }

			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{




			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *                If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static MolAndDS2CSIDResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 MolAndDS2CSIDResponse object =
						 new MolAndDS2CSIDResponse();

				 int event;
				 java.lang.String nillableValue = null;
				 java.lang.String prefix ="";
				 java.lang.String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();


					 if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						 java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								 "type");
						 if (fullTypeName!=null){
							 java.lang.String nsPrefix = null;
							 if (fullTypeName.indexOf(":") > -1){
								 nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							 }
							 nsPrefix = nsPrefix==null?"":nsPrefix;

							 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							 if (!"MolAndDS2CSIDResponse".equals(type)){
								 //find namespace for the prefix
								 java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								 return (MolAndDS2CSIDResponse)ExtensionMapper.getTypeObject(
										 nsUri,type,reader);
							 }


						 }


					 }




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();




					 reader.next();


					 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","MolAndDS2CSIDResult").equals(reader.getName())){

						 object.setMolAndDS2CSIDResult(ArrayOfInt.Factory.parse(reader));

						 reader.next();

					 }  // End of if for expected property start element

					 else {

					 }

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();

					 if (reader.isStartElement())
						 // A start element we are not expecting indicates a trailing invalid property
						 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class IntrinsicPropertiesSearchResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"IntrinsicPropertiesSearchResponse",
				"ns1");



		/**
		 * field for IntrinsicPropertiesSearchResult
		 */


		protected java.lang.String localIntrinsicPropertiesSearchResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localIntrinsicPropertiesSearchResultTracker = false ;

		public boolean isIntrinsicPropertiesSearchResultSpecified(){
			return localIntrinsicPropertiesSearchResultTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getIntrinsicPropertiesSearchResult(){
			return localIntrinsicPropertiesSearchResult;
		}



		/**
		 * Auto generated setter method
		 * @param param IntrinsicPropertiesSearchResult
		 */
		public void setIntrinsicPropertiesSearchResult(java.lang.String param){
			localIntrinsicPropertiesSearchResultTracker = param != null;

			this.localIntrinsicPropertiesSearchResult=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":IntrinsicPropertiesSearchResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"IntrinsicPropertiesSearchResponse",
							xmlWriter);
				}


			}
			if (localIntrinsicPropertiesSearchResultTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "IntrinsicPropertiesSearchResult", xmlWriter);


				if (localIntrinsicPropertiesSearchResult==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("IntrinsicPropertiesSearchResult cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localIntrinsicPropertiesSearchResult);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localIntrinsicPropertiesSearchResultTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"IntrinsicPropertiesSearchResult"));

				if (localIntrinsicPropertiesSearchResult != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntrinsicPropertiesSearchResult));
				} else {
					throw new org.apache.axis2.databinding.ADBException("IntrinsicPropertiesSearchResult cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static IntrinsicPropertiesSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				IntrinsicPropertiesSearchResponse object =
						new IntrinsicPropertiesSearchResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"IntrinsicPropertiesSearchResponse".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IntrinsicPropertiesSearchResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","IntrinsicPropertiesSearchResult").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setIntrinsicPropertiesSearchResult(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfExtRefE
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"ArrayOfExtRef",
				"ns1");



		/**
		 * field for ArrayOfExtRef
		 */


		protected ArrayOfExtRef localArrayOfExtRef ;


		/**
		 * Auto generated getter method
		 * @return ArrayOfExtRef
		 */
		public  ArrayOfExtRef getArrayOfExtRef(){
			return localArrayOfExtRef;
		}



		/**
		 * Auto generated setter method
		 * @param param ArrayOfExtRef
		 */
		public void setArrayOfExtRef(ArrayOfExtRef param){

			this.localArrayOfExtRef=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			//We can safely assume an element has only one type associated with it

			if (localArrayOfExtRef==null){
				java.lang.String namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "ArrayOfExtRef", xmlWriter);

				// write the nil attribute
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
				xmlWriter.writeEndElement();
			}else{
				localArrayOfExtRef.serialize(MY_QNAME,xmlWriter);
			}


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{




			//We can safely assume an element has only one type associated with it

			if (localArrayOfExtRef==null){
				return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
			}else{
				return localArrayOfExtRef.getPullParser(MY_QNAME);
			}


		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ArrayOfExtRefE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ArrayOfExtRefE object =
						new ArrayOfExtRefE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)){
						// Skip the element and report the null value.  It cannot have subelements.
						while (!reader.isEndElement())
							reader.next();

						return object;


					}



					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					while(!reader.isEndElement()) {
						if (reader.isStartElement() ){

							if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","ArrayOfExtRef").equals(reader.getName())){

								nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
								if ("true".equals(nillableValue) || "1".equals(nillableValue)){
									object.setArrayOfExtRef(null);
									reader.next();

								}else{

									object.setArrayOfExtRef(ArrayOfExtRef.Factory.parse(reader));
								}
							}  // End of if for expected property start element

							else{
								// A start element we are not expecting indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
							}

						} else {
							reader.next();
						}  
					}  // end of while loop




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class PredictedPropertiesSearch
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"PredictedPropertiesSearch",
				"ns1");



		/**
		 * field for Options
		 */


		protected PredictedPropertiesSearchOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;

		public boolean isOptionsSpecified(){
			return localOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return PredictedPropertiesSearchOptions
		 */
		public  PredictedPropertiesSearchOptions getOptions(){
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(PredictedPropertiesSearchOptions param){
			localOptionsTracker = param != null;

			this.localOptions=param;


		}


		/**
		 * field for CommonOptions
		 */


		protected CommonSearchOptions localCommonOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localCommonOptionsTracker = false ;

		public boolean isCommonOptionsSpecified(){
			return localCommonOptionsTracker;
		}



		/**
		 * Auto generated getter method
		 * @return CommonSearchOptions
		 */
		public  CommonSearchOptions getCommonOptions(){
			return localCommonOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param CommonOptions
		 */
		public void setCommonOptions(CommonSearchOptions param){
			localCommonOptionsTracker = param != null;

			this.localCommonOptions=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":PredictedPropertiesSearch",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"PredictedPropertiesSearch",
							xmlWriter);
				}


			}
			if (localOptionsTracker){
				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","options"),
						xmlWriter);
			} if (localCommonOptionsTracker){
				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				localCommonOptions.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"options"));


				if (localOptions==null){
					throw new org.apache.axis2.databinding.ADBException("options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localCommonOptionsTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"commonOptions"));


				if (localCommonOptions==null){
					throw new org.apache.axis2.databinding.ADBException("commonOptions cannot be null!!");
				}
				elementList.add(localCommonOptions);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static PredictedPropertiesSearch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				PredictedPropertiesSearch object =
						new PredictedPropertiesSearch();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"PredictedPropertiesSearch".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (PredictedPropertiesSearch)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","options").equals(reader.getName())){

						object.setOptions(PredictedPropertiesSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","commonOptions").equals(reader.getName())){

						object.setCommonOptions(CommonSearchOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class GetAsyncSearchResultPart
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"GetAsyncSearchResultPart",
				"ns1");



		/**
		 * field for Rid
		 */


		protected java.lang.String localRid ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localRidTracker = false ;

		public boolean isRidSpecified(){
			return localRidTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getRid(){
			return localRid;
		}



		/**
		 * Auto generated setter method
		 * @param param Rid
		 */
		public void setRid(java.lang.String param){
			localRidTracker = param != null;

			this.localRid=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}


		/**
		 * field for Start
		 */


		protected int localStart ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getStart(){
			return localStart;
		}



		/**
		 * Auto generated setter method
		 * @param param Start
		 */
		public void setStart(int param){

			this.localStart=param;


		}


		/**
		 * field for Count
		 */


		protected int localCount ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getCount(){
			return localCount;
		}



		/**
		 * Auto generated setter method
		 * @param param Count
		 */
		public void setCount(int param){

			this.localCount=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":GetAsyncSearchResultPart",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"GetAsyncSearchResultPart",
							xmlWriter);
				}


			}
			if (localRidTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "rid", xmlWriter);


				if (localRid==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localRid);

				}

				xmlWriter.writeEndElement();
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "start", xmlWriter);

			if (localStart==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("start cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
			}

			xmlWriter.writeEndElement();

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "count", xmlWriter);

			if (localCount==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("count cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localRidTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"rid"));

				if (localRid != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRid));
				} else {
					throw new org.apache.axis2.databinding.ADBException("rid cannot be null!!");
				}
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"start"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));

			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"count"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static GetAsyncSearchResultPart parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAsyncSearchResultPart object =
						new GetAsyncSearchResultPart();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"GetAsyncSearchResultPart".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAsyncSearchResultPart)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","rid").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setRid(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","start").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setStart(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","count").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setCount(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ArrayOfAnyType
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
                name = ArrayOfAnyType
                Namespace URI = http://www.chemspider.com/
                Namespace Prefix = ns1
		 */


		/**
		 * field for AnyType
		 */


		protected org.apache.axiom.om.OMElement localAnyType ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localAnyTypeTracker = false ;

		public boolean isAnyTypeSpecified(){
			return localAnyTypeTracker;
		}



		/**
		 * Auto generated getter method
		 * @return org.apache.axiom.om.OMElement
		 */
		public  org.apache.axiom.om.OMElement getAnyType(){
			return localAnyType;
		}



		/**
		 * Auto generated setter method
		 * @param param AnyType
		 */
		public void setAnyType(org.apache.axiom.om.OMElement param){
			localAnyTypeTracker = true;

			this.localAnyType=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
			return factory.createOMElement(dataSource,parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ArrayOfAnyType",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ArrayOfAnyType",
							xmlWriter);
				}


			}
			if (localAnyTypeTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "anyType", xmlWriter);


				if (localAnyType==null){
					// write the nil attribute

					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

				}else{

					localAnyType.serialize(xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAnyTypeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"anyType"));

				elementList.add(localAnyType==null?null:
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAnyType));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ArrayOfAnyType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ArrayOfAnyType object =
						new ArrayOfAnyType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ArrayOfAnyType".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ArrayOfAnyType)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement()){

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							java.lang.String content = reader.getElementText();

							org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
							org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace("http://www.chemspider.com/", "");
							org.apache.axiom.om.OMElement _valueAnyType = fac.createOMElement("anyType", omNs);
							_valueAnyType.addChild(fac.createOMText(_valueAnyType, content));
							object.setAnyType(_valueAnyType);

						} else {


							reader.getElementText(); // throw away text nodes if any.
						}

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class CSID2ExtRefs
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://www.chemspider.com/",
				"CSID2ExtRefs",
				"ns1");



		/**
		 * field for CSID
		 */


		protected int localCSID ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getCSID(){
			return localCSID;
		}



		/**
		 * Auto generated setter method
		 * @param param CSID
		 */
		public void setCSID(int param){

			this.localCSID=param;


		}


		/**
		 * field for Datasources
		 */


		protected ArrayOfString localDatasources ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localDatasourcesTracker = false ;

		public boolean isDatasourcesSpecified(){
			return localDatasourcesTracker;
		}



		/**
		 * Auto generated getter method
		 * @return ArrayOfString
		 */
		public  ArrayOfString getDatasources(){
			return localDatasources;
		}



		/**
		 * Auto generated setter method
		 * @param param Datasources
		 */
		public void setDatasources(ArrayOfString param){
			localDatasourcesTracker = param != null;

			this.localDatasources=param;


		}


		/**
		 * field for Token
		 */


		protected java.lang.String localToken ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTokenTracker = false ;

		public boolean isTokenSpecified(){
			return localTokenTracker;
		}



		/**
		 * Auto generated getter method
		 * @return java.lang.String
		 */
		public  java.lang.String getToken(){
			return localToken;
		}



		/**
		 * Auto generated setter method
		 * @param param Token
		 */
		public void setToken(java.lang.String param){
			localTokenTracker = param != null;

			this.localToken=param;


		}




		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
			return factory.createOMElement(dataSource,MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			java.lang.String prefix = null;
			java.lang.String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType){


				java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.chemspider.com/");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":CSID2ExtRefs",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"CSID2ExtRefs",
							xmlWriter);
				}


			}

			namespace = "http://www.chemspider.com/";
			writeStartElement(null, namespace, "CSID", xmlWriter);

			if (localCSID==java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException("CSID cannot be null!!");

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			}

			xmlWriter.writeEndElement();
			if (localDatasourcesTracker){
				if (localDatasources==null){
					throw new org.apache.axis2.databinding.ADBException("datasources cannot be null!!");
				}
				localDatasources.serialize(new javax.xml.namespace.QName("http://www.chemspider.com/","datasources"),
						xmlWriter);
			} if (localTokenTracker){
				namespace = "http://www.chemspider.com/";
				writeStartElement(null, namespace, "token", xmlWriter);


				if (localToken==null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localToken);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if(namespace.equals("http://www.chemspider.com/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,
				java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
					"CSID"));

			elementList.add(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCSID));
			if (localDatasourcesTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"datasources"));


				if (localDatasources==null){
					throw new org.apache.axis2.databinding.ADBException("datasources cannot be null!!");
				}
				elementList.add(localDatasources);
			} if (localTokenTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.chemspider.com/",
						"token"));

				if (localToken != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localToken));
				} else {
					throw new org.apache.axis2.databinding.ADBException("token cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *                If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static CSID2ExtRefs parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				CSID2ExtRefs object =
						new CSID2ExtRefs();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix ="";
				java.lang.String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
						java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null){
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1){
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"CSID2ExtRefs".equals(type)){
								//find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CSID2ExtRefs)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","CSID").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setCSID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					}  // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","datasources").equals(reader.getName())){

						object.setDatasources(ArrayOfString.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.chemspider.com/","token").equals(reader.getName())){

						java.lang.String content = reader.getElementText();

						object.setToken(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetRecordDetails param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetRecordDetails.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetRecordDetailsResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetRecordDetailsResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.PredictedPropertiesSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.PredictedPropertiesSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.AsyncSimpleSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.AsyncSimpleSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.AsyncSimpleSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.AsyncSimpleSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetCompoundInfo param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetCompoundInfo.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetCompoundInfoResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetCompoundInfoResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetRecordImage param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetRecordImage.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetRecordImageResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetRecordImageResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.Mol2CSID param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.Mol2CSID.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.Mol2CSIDResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.Mol2CSIDResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.StructureSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.StructureSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.StructureSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.StructureSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetDataSliceCompounds param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetDataSliceCompounds.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.IntrinsicPropertiesSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.IntrinsicPropertiesSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchStatus param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchStatus.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimilaritySearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimilaritySearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimilaritySearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimilaritySearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimpleSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimpleSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimpleSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimpleSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SubstructureSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SubstructureSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SubstructureSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SubstructureSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetCompoundThumbnail param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetCompoundThumbnail.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetCompoundThumbnailResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetCompoundThumbnailResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.CSID2ExtRefs param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.CSID2ExtRefs.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.CSID2ExtRefsResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.CSID2ExtRefsResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.LassoSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.LassoSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.LassoSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.LassoSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.ElementsSearch param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.ElementsSearch.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.ElementsSearchResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.ElementsSearchResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchResult param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResult.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchResultResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResultResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimpleSearch2IdList param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimpleSearch2IdList.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.SimpleSearch2IdListResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.SimpleSearch2IdListResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.MolAndDS2CSID param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.MolAndDS2CSID.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.MolAndDS2CSIDResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.MolAndDS2CSIDResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchResultPart param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResultPart.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetRecordDetails param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetRecordDetails.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.PredictedPropertiesSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.PredictedPropertiesSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.AsyncSimpleSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.AsyncSimpleSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetCompoundInfo param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetCompoundInfo.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetRecordImage param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetRecordImage.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.Mol2CSID param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.Mol2CSID.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.StructureSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.StructureSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetDataSliceCompounds param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetDataSliceCompounds.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.IntrinsicPropertiesSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.IntrinsicPropertiesSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetAsyncSearchStatus param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchStatus.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.SimilaritySearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.SimilaritySearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.SimpleSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.SimpleSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.SubstructureSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.SubstructureSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetCompoundThumbnail param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetCompoundThumbnail.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.CSID2ExtRefs param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.CSID2ExtRefs.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.LassoSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.LassoSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.ElementsSearch param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.ElementsSearch.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetAsyncSearchResult param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResult.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.SimpleSearch2IdList param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.SimpleSearch2IdList.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.MolAndDS2CSID param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.MolAndDS2CSID.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.chemspider.www.SearchStub.GetAsyncSearchResultPart param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(com.chemspider.www.SearchStub.GetAsyncSearchResultPart.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */




	/**
	 *  get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
		return factory.getDefaultEnvelope();
	}


	private  java.lang.Object fromOM(
			org.apache.axiom.om.OMElement param,
			java.lang.Class type,
			java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

		try {

			if (com.chemspider.www.SearchStub.GetRecordDetails.class.equals(type)){

				return com.chemspider.www.SearchStub.GetRecordDetails.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetRecordDetailsResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetRecordDetailsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.PredictedPropertiesSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.PredictedPropertiesSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.PredictedPropertiesSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.AsyncSimpleSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.AsyncSimpleSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.AsyncSimpleSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.AsyncSimpleSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetCompoundInfo.class.equals(type)){

				return com.chemspider.www.SearchStub.GetCompoundInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetCompoundInfoResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetCompoundInfoResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetRecordImage.class.equals(type)){

				return com.chemspider.www.SearchStub.GetRecordImage.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetRecordImageResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetRecordImageResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.Mol2CSID.class.equals(type)){

				return com.chemspider.www.SearchStub.Mol2CSID.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.Mol2CSIDResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.Mol2CSIDResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.StructureSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.StructureSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.StructureSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.StructureSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetDataSliceCompounds.class.equals(type)){

				return com.chemspider.www.SearchStub.GetDataSliceCompounds.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetDataSliceCompoundsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.IntrinsicPropertiesSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.IntrinsicPropertiesSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.IntrinsicPropertiesSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchStatus.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchStatus.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchStatusResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimilaritySearch.class.equals(type)){

				return com.chemspider.www.SearchStub.SimilaritySearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimilaritySearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.SimilaritySearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimpleSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.SimpleSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimpleSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.SimpleSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SubstructureSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.SubstructureSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SubstructureSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.SubstructureSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetCompoundThumbnail.class.equals(type)){

				return com.chemspider.www.SearchStub.GetCompoundThumbnail.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetCompoundThumbnailResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetCompoundThumbnailResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.CSID2ExtRefs.class.equals(type)){

				return com.chemspider.www.SearchStub.CSID2ExtRefs.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.CSID2ExtRefsResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.CSID2ExtRefsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.LassoSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.LassoSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.LassoSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.LassoSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.ElementsSearch.class.equals(type)){

				return com.chemspider.www.SearchStub.ElementsSearch.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.ElementsSearchResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.ElementsSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchResult.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchResult.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchResultResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchResultResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimpleSearch2IdList.class.equals(type)){

				return com.chemspider.www.SearchStub.SimpleSearch2IdList.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.SimpleSearch2IdListResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.SimpleSearch2IdListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.MolAndDS2CSID.class.equals(type)){

				return com.chemspider.www.SearchStub.MolAndDS2CSID.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.MolAndDS2CSIDResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.MolAndDS2CSIDResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchResultPart.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchResultPart.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

			if (com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse.class.equals(type)){

				return com.chemspider.www.SearchStub.GetAsyncSearchResultPartResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			}

		} catch (java.lang.Exception e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}




}
